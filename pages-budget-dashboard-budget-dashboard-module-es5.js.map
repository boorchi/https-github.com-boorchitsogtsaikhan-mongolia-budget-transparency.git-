{"version":3,"sources":["webpack:///src/app/pages/budget-dashboard/budget-dashboard.component.html","webpack:///src/app/pages/budget-dashboard/budget-dashboard.component.ts","webpack:///src/app/pages/budget-dashboard/budget-dashboard.module.ts"],"names":["BudgetDashboardComponent","backendService","loading","backendConnected","budgetData","revenueData","indicatorsData","dashboardStats","aggregatedData","selectedYear","Date","getFullYear","selectedCategory","selectedMinistry","selectedIndicatorCategory","availableYears","availableCategories","key","name","availableIndicatorCategories","ngOnInit","checkBackendConnection","loadDashboardData","console","log","error","getDashboardStats","loadBudgetData","loadRevenueData","loadIndicatorsData","getBudgetAggregates","getBudgetDataByCategory","getBudgetDataByMinistry","getBudgetDataByYear","getRevenueDataByYear","getIndicatorsByCategory","getIndicatorsByYear","onYearChange","year","onCategoryChange","category","onMinistryChange","ministry","onIndicatorCategoryChange","clearFilters","getUniqueMinistries","ministries","Set","map","item","filter","length","getTotalBudget","reduce","total","amount","getBudgetByCategory","categoryGroups","forEach","categoryKey","categoryName","getCategoryDisplayName","count","Object","keys","sort","a","b","getBudgetByMinistry","ministryGroups","ministryKey","getTotalRevenue","sum","getTotalExpenditure","formatCurrency","getPercentageOfTotal","toFixed","indicator","getIndicatorCategoryDisplayName","indicators","push","categoryNames","getIndicatorStatusIcon","status","getIndicatorStatusClass","trackByFn","index","id","trackIndicatorByFn","Math","shouldShowIndicators","selector","templateUrl","styleUrls","routes","path","component","BudgetDashboardModule","forChild","declarations","imports"],"mappings":"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","file":"pages-budget-dashboard-budget-dashboard-module-es5.js","sourcesContent":["<div class=\"budget-dashboard\">\n  <!-- Header -->\n  <div class=\"dashboard-header\">\n    <h1>\n      <i class=\"fas fa-chart-line\"></i>\n      Төсвийн мэдээллийн самбар\n    </h1>\n    <p class=\"subtitle\">NestJS Backend системээс авсан өгөгдөл</p>\n  </div>\n\n  <!-- Connection Status -->\n  <div class=\"connection-status\" [ngClass]=\"backendConnected ? 'connected' : 'disconnected'\">\n    <i class=\"fas\" [ngClass]=\"backendConnected ? 'fa-wifi' : 'fa-exclamation-triangle'\"></i>\n    <span *ngIf=\"backendConnected\">Backend серверт амжилттай холбогдсон</span>\n    <span *ngIf=\"!backendConnected\">Backend сервертэй холбогдож чадсангүй. Анхны өгөгдлийг ашиглаж байна.</span>\n  </div>\n\n  <div *ngIf=\"!backendConnected\" class=\"no-backend-message\">\n    <div class=\"alert alert-warning\">\n      <i class=\"fas fa-info-circle\"></i>\n      <strong>Backend сервер ажиллахгүй байна.</strong><br>\n      Backend серверийг эхлүүлнэ үү: <code>cd websan-backend && npm start</code>\n    </div>\n  </div>\n\n  <div *ngIf=\"backendConnected\">\n    <!-- Loading Spinner -->\n    <div *ngIf=\"loading\" class=\"loading-container\">\n      <div class=\"spinner\"></div>\n      <p>Өгөгдөл ачаалж байна...</p>\n    </div>\n\n    <div *ngIf=\"!loading\">\n      <!-- Dashboard Statistics -->\n      <div *ngIf=\"dashboardStats\" class=\"stats-container\">\n        <div class=\"stats-grid\">\n          <!-- Revenue Card -->\n          <div class=\"stat-card revenue-card\">\n            <div class=\"stat-icon\">\n              <i class=\"fas fa-arrow-up\"></i>\n            </div>\n            <div class=\"stat-content\">\n              <h3>{{ formatCurrency(getTotalRevenue()) }}</h3>\n              <p>Орлого</p>\n            </div>\n          </div>\n\n          <!-- Expenditure Card -->\n          <div class=\"stat-card expenditure-card\">\n            <div class=\"stat-icon\">\n              <i class=\"fas fa-arrow-down\"></i>\n            </div>\n            <div class=\"stat-content\">\n              <h3>{{ formatCurrency(getTotalExpenditure()) }}</h3>\n              <p>Зарлага</p>\n            </div>\n          </div>\n\n          <!-- Total Budget Card -->\n          <div class=\"stat-card\">\n            <div class=\"stat-icon\">\n              <i class=\"fas fa-money-bill-wave\"></i>\n            </div>\n            <div class=\"stat-content\">\n              <h3>{{ formatCurrency(dashboardStats.totalBudget) }}</h3>\n              <p>Нийт төсөв</p>\n            </div>\n          </div>\n\n          <!-- Records Card -->\n          <div class=\"stat-card\">\n            <div class=\"stat-icon\">\n              <i class=\"fas fa-list\"></i>\n            </div>\n            <div class=\"stat-content\">\n              <h3>{{ dashboardStats.totalRecords }}</h3>\n              <p>Төсвийн бичлэг</p>\n            </div>\n          </div>\n        </div>\n\n        <div *ngIf=\"dashboardStats.lastUpdate\" class=\"last-update\">\n          <i class=\"fas fa-clock\"></i>\n          Сүүлийн шинэчлэл: {{ dashboardStats.lastUpdate | date:'yyyy/MM/dd HH:mm' }}\n        </div>\n      </div>\n\n      <!-- Filters -->\n      <div class=\"filters-container\">\n        <h2>Шүүлтүүр</h2>\n        \n        <div class=\"filters-row\">\n          <!-- Year Filter -->\n          <div class=\"filter-group\">\n            <label for=\"year-select\">Он:</label>\n            <select id=\"year-select\" [(ngModel)]=\"selectedYear\" (change)=\"onYearChange(selectedYear)\">\n              <option *ngFor=\"let year of availableYears\" [value]=\"year\">{{ year }}</option>\n            </select>\n          </div>\n\n          <!-- Category Filter -->\n          <div class=\"filter-group\">\n            <label for=\"category-select\">Категори:</label>\n            <select id=\"category-select\" [(ngModel)]=\"selectedCategory\" (change)=\"onCategoryChange(selectedCategory)\">\n              <option value=\"\">Бүгд</option>\n              <option *ngFor=\"let category of availableCategories\" [value]=\"category.key\">\n                {{ category.name }}\n              </option>\n            </select>\n          </div>\n\n          <!-- Ministry Filter -->\n          <div class=\"filter-group\">\n            <label for=\"ministry-select\">Яам:</label>\n            <select id=\"ministry-select\" [(ngModel)]=\"selectedMinistry\" (change)=\"onMinistryChange(selectedMinistry)\">\n              <option value=\"\">Бүгд</option>\n              <option *ngFor=\"let ministry of getUniqueMinistries()\" [value]=\"ministry\">\n                {{ ministry }}\n              </option>\n            </select>\n          </div>\n\n          <!-- Clear Filters Button -->\n          <div class=\"filter-group\">\n            <button class=\"btn btn-secondary\" (click)=\"clearFilters()\">\n              <i class=\"fas fa-times\"></i>\n              Цэвэрлэх\n            </button>\n          </div>\n        </div>\n      </div>\n\n      <!-- Indicators Section - Only show if backend is connected and has data -->\n      <div *ngIf=\"shouldShowIndicators()\" class=\"indicators-container\">\n        <div class=\"section-header\">\n          <h2>\n            <i class=\"fas fa-chart-line\"></i>\n            Эдийн засгийн үзүүлэлтүүд\n          </h2>\n          \n          <!-- Indicator Category Filter -->\n          <div class=\"indicator-filter\">\n            <label for=\"indicator-category-select\">Категори:</label>\n            <select id=\"indicator-category-select\" [(ngModel)]=\"selectedIndicatorCategory\" (change)=\"onIndicatorCategoryChange(selectedIndicatorCategory)\">\n              <option value=\"\">Бүгд</option>\n              <option *ngFor=\"let category of availableIndicatorCategories\" [value]=\"category.key\">\n                {{ category.name }}\n              </option>\n            </select>\n          </div>\n        </div>\n\n        <div *ngIf=\"indicatorsData.length === 0\" class=\"no-data\">\n          <i class=\"fas fa-chart-bar\"></i>\n          <p>Үзүүлэлтийн өгөгдөл олдсонгүй.</p>\n        </div>\n\n        <div *ngIf=\"indicatorsData.length > 0\">\n          <!-- Indicators Grid -->\n          <div class=\"indicators-grid\">\n            <div *ngFor=\"let indicator of indicatorsData; trackBy: trackIndicatorByFn\" \n                 class=\"indicator-card\"\n                 [ngClass]=\"getIndicatorStatusClass(indicator.status)\">\n              \n              <div class=\"indicator-header\">\n                <div class=\"indicator-icon\">\n                  {{ getIndicatorStatusIcon(indicator.status) }}\n                </div>\n                <div class=\"indicator-category\">\n                  {{ getIndicatorCategoryDisplayName(indicator.category) }}\n                </div>\n              </div>\n\n              <div class=\"indicator-content\">\n                <h3 class=\"indicator-name\">{{ indicator.name }}</h3>\n                \n                <div class=\"indicator-value\">\n                  <span class=\"current-value\">{{ indicator.value }}</span>\n                  <span class=\"unit\">{{ indicator.unit }}</span>\n                </div>\n\n                <div *ngIf=\"indicator.previousValue && indicator.changePercentage\" class=\"indicator-change\">\n                  <span class=\"previous-value\">\n                    Өмнөх: {{ indicator.previousValue }} {{ indicator.unit }}\n                  </span>\n                  <span class=\"change-percentage\" \n                        [ngClass]=\"indicator.changePercentage > 0 ? 'positive' : 'negative'\">\n                    {{ indicator.changePercentage > 0 ? '+' : '' }}{{ indicator.changePercentage }}%\n                  </span>\n                </div>\n\n                <div *ngIf=\"indicator.description\" class=\"indicator-description\">\n                  {{ indicator.description }}\n                </div>\n\n                <div class=\"indicator-meta\">\n                  <span class=\"indicator-year\">{{ indicator.year }} он</span>\n                </div>\n              </div>\n            </div>\n          </div>\n\n          <!-- Indicators by Category -->\n          <div *ngIf=\"!selectedIndicatorCategory\" class=\"indicators-by-category\">\n            <h3>Категориор ангилсан үзүүлэлтүүд</h3>\n            \n            <div *ngFor=\"let categoryGroup of getIndicatorsByCategory()\" class=\"category-group\">\n              <h4 class=\"category-title\">\n                <i class=\"fas fa-folder\"></i>\n                {{ categoryGroup.name }}\n                <span class=\"count\">({{ categoryGroup.indicators.length }})</span>\n              </h4>\n              \n              <div class=\"category-indicators\">\n                <div *ngFor=\"let indicator of categoryGroup.indicators\" class=\"mini-indicator\">\n                  <div class=\"mini-indicator-name\">{{ indicator.name }}</div>\n                  <div class=\"mini-indicator-value\">\n                    {{ indicator.value }} {{ indicator.unit }}\n                    <span *ngIf=\"indicator.changePercentage\" \n                          class=\"mini-change\" \n                          [ngClass]=\"indicator.changePercentage > 0 ? 'positive' : 'negative'\">\n                      {{ indicator.changePercentage > 0 ? '↗' : '↘' }} {{ Math.abs(indicator.changePercentage) }}%\n                    </span>\n                  </div>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n\n      <!-- Budget Data Overview -->\n      <div class=\"budget-overview\">\n        <div class=\"overview-header\">\n          <h2>Төсвийн тойм</h2>\n          <div class=\"total-budget\">\n            <span class=\"label\">Нийт дүн:</span>\n            <span class=\"amount\">{{ formatCurrency(getTotalBudget()) }}</span>\n          </div>\n        </div>\n\n        <!-- Budget by Category Chart -->\n        <div class=\"chart-container\">\n          <h3>Категориор ангилсан</h3>\n          <div class=\"category-bars\">\n            <div *ngFor=\"let item of getBudgetByCategory()\" class=\"category-bar-item\">\n              <div class=\"category-info\">\n                <span class=\"category-name\">{{ item.name }}</span>\n                <span class=\"category-amount\">{{ formatCurrency(item.total) }}</span>\n                <span class=\"category-percentage\">({{ getPercentageOfTotal(item.total) }}%)</span>\n              </div>\n              <div class=\"progress-bar\">\n                <div class=\"progress-fill\" [style.width.%]=\"getPercentageOfTotal(item.total)\"></div>\n              </div>\n            </div>\n          </div>\n        </div>\n\n        <!-- Budget by Ministry Chart -->\n        <div class=\"chart-container\">\n          <h3>Яамаар ангилсан</h3>\n          <div class=\"ministry-bars\">\n            <div *ngFor=\"let item of getBudgetByMinistry()\" class=\"ministry-bar-item\">\n              <div class=\"ministry-info\">\n                <span class=\"ministry-name\">{{ item.name }}</span>\n                <span class=\"ministry-amount\">{{ formatCurrency(item.total) }}</span>\n                <span class=\"ministry-percentage\">({{ getPercentageOfTotal(item.total) }}%)</span>\n              </div>\n              <div class=\"progress-bar\">\n                <div class=\"progress-fill\" [style.width.%]=\"getPercentageOfTotal(item.total)\"></div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n\n      <!-- Budget Data Table -->\n      <div class=\"budget-table-container\">\n        <h2>Төсвийн мэдээлэл</h2>\n        \n        <div *ngIf=\"budgetData.length === 0\" class=\"no-data\">\n          <i class=\"fas fa-inbox\"></i>\n          <p>Шүүлтэд тохирох өгөгдөл олдсонгүй.</p>\n        </div>\n\n        <div *ngIf=\"budgetData.length > 0\" class=\"table-responsive\">\n          <table class=\"budget-table\">\n            <thead>\n              <tr>\n                <th>Яам</th>\n                <th>Хэлтэс</th>\n                <th>Он</th>\n                <th>Категори</th>\n                <th>Төрөл</th>\n                <th>Дүн</th>\n                <th>Тайлбар</th>\n              </tr>\n            </thead>\n            <tbody>\n              <tr *ngFor=\"let item of budgetData; trackBy: trackByFn\">\n                <td>{{ item.ministry }}</td>\n                <td>{{ item.department }}</td>\n                <td>{{ item.year }}</td>\n                <td>\n                  <span class=\"category-tag\" [attr.data-category]=\"item.category\">\n                    {{ backendService.getCategoryDisplayName(item.category) }}\n                  </span>\n                </td>\n                <td>{{ item.type }}</td>\n                <td class=\"amount\">{{ formatCurrency(item.amount) }}</td>\n                <td class=\"description\">{{ item.description || '-' }}</td>\n              </tr>\n            </tbody>\n          </table>\n        </div>\n      </div>\n    </div>\n  </div>\n</div>\n","import { Component, OnInit } from '@angular/core';\nimport { BackendService, BudgetData, DashboardStats, IndicatorData } from '../../services/backend.service';\n\n@Component({\n  selector: 'app-budget-dashboard',\n  templateUrl: './budget-dashboard.component.html',\n  styleUrls: ['./budget-dashboard.component.scss']\n})\nexport class BudgetDashboardComponent implements OnInit {\n  loading = false;\n  backendConnected = false;\n  budgetData: BudgetData[] = [];\n  revenueData: BudgetData[] = [];\n  indicatorsData: IndicatorData[] = [];\n  dashboardStats: DashboardStats | null = null;\n  aggregatedData: any[] = [];\n  selectedYear = new Date().getFullYear();\n  selectedCategory = '';\n  selectedMinistry = '';\n  selectedIndicatorCategory = '';\n\n  // Available filter options\n  availableYears = [2025, 2024, 2023, 2022, 2021];\n  availableCategories = [\n    { key: 'education', name: 'Боловсрол' },\n    { key: 'health', name: 'Эрүүл мэнд' },\n    { key: 'infrastructure', name: 'Дэд бүтэц' },\n    { key: 'defense', name: 'Батлан хамгаалах' },\n    { key: 'social', name: 'Нийгмийн хамгаалал' },\n    { key: 'environment', name: 'Байгаль орчин' },\n    { key: 'agriculture', name: 'Хөдөө аж ахуй' },\n    { key: 'tourism', name: 'Аялал жуулчлал' },\n    { key: 'culture', name: 'Соёл урлаг' },\n    { key: 'transport', name: 'Тээвэр харилцаа' }\n  ];\n\n  availableIndicatorCategories = [\n    { key: 'economic', name: 'Эдийн засаг' },\n    { key: 'social', name: 'Нийгэм' },\n    { key: 'fiscal', name: 'Төсөв санхүү' },\n    { key: 'environmental', name: 'Байгаль орчин' },\n    { key: 'governance', name: 'Засаглал' }\n  ];\n\n  constructor(\n    public backendService: BackendService\n  ) {}\n\n  async ngOnInit() {\n    await this.checkBackendConnection();\n    if (this.backendConnected) {\n      await this.loadDashboardData();\n    }\n  }\n\n  /**\n   * Check if backend is available\n   */\n  async checkBackendConnection() {\n    try {\n      this.backendConnected = await this.backendService.checkBackendConnection();\n      console.log('Backend connection status:', this.backendConnected);\n    } catch (error) {\n      console.error('Backend connection check failed:', error);\n      this.backendConnected = false;\n    }\n  }\n\n  /**\n   * Load all dashboard data\n   */\n  async loadDashboardData() {\n    this.loading = true;\n    \n    try {\n      // Load dashboard statistics\n      this.dashboardStats = await this.backendService.getDashboardStats();\n      \n      // Load budget data (expenditure)\n      await this.loadBudgetData();\n      \n      // Load revenue data\n      await this.loadRevenueData();\n      \n      // Only load indicators if backend is connected\n      if (this.backendConnected) {\n        await this.loadIndicatorsData();\n      }\n      \n      // Load aggregated data\n      this.aggregatedData = await this.backendService.getBudgetAggregates('category');\n      \n    } catch (error) {\n      console.error('Error loading dashboard data:', error);\n    } finally {\n      this.loading = false;\n    }\n  }\n\n  /**\n   * Load budget data based on current filters\n   */\n  async loadBudgetData() {\n    try {\n      if (this.selectedCategory) {\n        this.budgetData = await this.backendService.getBudgetDataByCategory(this.selectedCategory);\n      } else if (this.selectedMinistry) {\n        this.budgetData = await this.backendService.getBudgetDataByMinistry(this.selectedMinistry);\n      } else {\n        this.budgetData = await this.backendService.getBudgetDataByYear(this.selectedYear);\n      }\n    } catch (error) {\n      console.error('Error loading budget data:', error);\n      this.budgetData = [];\n    }\n  }\n\n  /**\n   * Load revenue data based on current filters\n   */\n  async loadRevenueData() {\n    try {\n      this.revenueData = await this.backendService.getRevenueDataByYear(this.selectedYear);\n    } catch (error) {\n      console.error('Error loading revenue data:', error);\n      this.revenueData = [];\n    }\n  }\n\n  /**\n   * Load indicators data based on current filters\n   */\n  async loadIndicatorsData() {\n    try {\n      if (this.selectedIndicatorCategory) {\n        this.indicatorsData = await this.backendService.getIndicatorsByCategory(this.selectedIndicatorCategory);\n      } else {\n        this.indicatorsData = await this.backendService.getIndicatorsByYear(this.selectedYear);\n      }\n    } catch (error) {\n      console.error('Error loading indicators data:', error);\n      this.indicatorsData = [];\n    }\n  }\n\n  /**\n   * Handle year filter change\n   */\n  async onYearChange(year: number) {\n    this.selectedYear = year;\n    this.selectedCategory = '';\n    this.selectedMinistry = '';\n    this.selectedIndicatorCategory = '';\n    this.loading = true;\n    await this.loadBudgetData();\n    \n    // Only reload indicators if backend is connected\n    if (this.backendConnected) {\n      await this.loadIndicatorsData();\n    }\n    \n    this.loading = false;\n  }\n\n  /**\n   * Handle category filter change\n   */\n  async onCategoryChange(category: string) {\n    this.selectedCategory = category;\n    this.selectedMinistry = '';\n    this.loading = true;\n    await this.loadBudgetData();\n    this.loading = false;\n  }\n\n  /**\n   * Handle ministry filter change\n   */\n  async onMinistryChange(ministry: string) {\n    this.selectedMinistry = ministry;\n    this.selectedCategory = '';\n    this.loading = true;\n    await this.loadBudgetData();\n    this.loading = false;\n  }\n\n  /**\n   * Handle indicator category filter change\n   */\n  async onIndicatorCategoryChange(category: string) {\n    this.selectedIndicatorCategory = category;\n    this.loading = true;\n    await this.loadIndicatorsData();\n    this.loading = false;\n  }\n\n  /**\n   * Clear all filters\n   */\n  async clearFilters() {\n    this.selectedCategory = '';\n    this.selectedMinistry = '';\n    this.selectedIndicatorCategory = '';\n    this.selectedYear = new Date().getFullYear();\n    this.loading = true;\n    await this.loadBudgetData();\n    \n    // Only reload indicators if backend is connected\n    if (this.backendConnected) {\n      await this.loadIndicatorsData();\n    }\n    \n    this.loading = false;\n  }\n\n  /**\n   * Get unique ministries from budget data\n   */\n  getUniqueMinistries(): string[] {\n    const ministries = [...new Set(this.budgetData.map(item => item.ministry))];\n    return ministries.filter(ministry => ministry && ministry.length > 0);\n  }\n\n  /**\n   * Calculate total budget amount\n   */\n  getTotalBudget(): number {\n    return this.budgetData.reduce((total, item) => total + (item.amount || 0), 0);\n  }\n\n  /**\n   * Get budget data grouped by category\n   */\n  getBudgetByCategory(): any[] {\n    const categoryGroups: { [key: string]: { name: string, total: number, count: number } } = {};\n    \n    this.budgetData.forEach(item => {\n      const categoryKey = item.category || 'other';\n      const categoryName = this.backendService.getCategoryDisplayName(categoryKey);\n      \n      if (!categoryGroups[categoryKey]) {\n        categoryGroups[categoryKey] = { name: categoryName, total: 0, count: 0 };\n      }\n      \n      categoryGroups[categoryKey].total += item.amount || 0;\n      categoryGroups[categoryKey].count += 1;\n    });\n    \n    return Object.keys(categoryGroups).map(key => ({\n      category: key,\n      ...categoryGroups[key]\n    })).sort((a, b) => b.total - a.total);\n  }\n\n  /**\n   * Get budget data grouped by ministry\n   */\n  getBudgetByMinistry(): any[] {\n    const ministryGroups: { [key: string]: { name: string, total: number, count: number } } = {};\n    \n    this.budgetData.forEach(item => {\n      const ministryKey = item.ministry || 'Unknown';\n      \n      if (!ministryGroups[ministryKey]) {\n        ministryGroups[ministryKey] = { name: ministryKey, total: 0, count: 0 };\n      }\n      \n      ministryGroups[ministryKey].total += item.amount || 0;\n      ministryGroups[ministryKey].count += 1;\n    });\n    \n    return Object.keys(ministryGroups).map(key => ({\n      ministry: key,\n      ...ministryGroups[key]\n    })).sort((a, b) => b.total - a.total);\n  }\n\n  /**\n   * Get total revenue amount\n   */\n  getTotalRevenue(): number {\n    return this.revenueData.reduce((sum, item) => sum + (item.amount || 0), 0);\n  }\n\n  /**\n   * Get total expenditure amount\n   */\n  getTotalExpenditure(): number {\n    return this.budgetData.reduce((sum, item) => sum + (item.amount || 0), 0);\n  }\n\n  /**\n   * Format currency for display\n   */\n  formatCurrency(amount: number): string {\n    return this.backendService.formatCurrency(amount);\n  }\n\n  /**\n   * Get percentage of total budget\n   */\n  getPercentageOfTotal(amount: number): string {\n    const total = this.getTotalBudget();\n    if (total === 0) return '0';\n    return ((amount / total) * 100).toFixed(1);\n  }\n\n  /**\n   * Get indicators grouped by category\n   */\n  getIndicatorsByCategory(): any[] {\n    const categoryGroups: { [key: string]: { name: string, indicators: IndicatorData[] } } = {};\n    \n    this.indicatorsData.forEach(indicator => {\n      const categoryKey = indicator.category || 'other';\n      const categoryName = this.getIndicatorCategoryDisplayName(categoryKey);\n      \n      if (!categoryGroups[categoryKey]) {\n        categoryGroups[categoryKey] = { name: categoryName, indicators: [] };\n      }\n      \n      categoryGroups[categoryKey].indicators.push(indicator);\n    });\n    \n    return Object.keys(categoryGroups).map(key => ({\n      category: key,\n      ...categoryGroups[key]\n    }));\n  }\n\n  /**\n   * Get indicator category display name in Mongolian\n   */\n  getIndicatorCategoryDisplayName(category: string): string {\n    const categoryNames = {\n      'economic': 'Эдийн засаг',\n      'social': 'Нийгэм',\n      'fiscal': 'Төсөв санхүү',\n      'environmental': 'Байгаль орчин',\n      'governance': 'Засаглал',\n      'other': 'Бусад'\n    };\n    \n    return categoryNames[category] || category;\n  }\n\n  /**\n   * Get indicator status icon\n   */\n  getIndicatorStatusIcon(status: string): string {\n    switch (status) {\n      case 'increase':\n        return '📈';\n      case 'decrease':\n        return '📉';\n      case 'stable':\n        return '➡️';\n      default:\n        return '📊';\n    }\n  }\n\n  /**\n   * Get indicator status color class\n   */\n  getIndicatorStatusClass(status: string): string {\n    switch (status) {\n      case 'increase':\n        return 'text-success';\n      case 'decrease':\n        return 'text-danger';\n      case 'stable':\n        return 'text-warning';\n      default:\n        return 'text-info';\n    }\n  }\n\n  /**\n   * Track function for ngFor performance optimization\n   */\n  trackByFn(index: number, item: BudgetData): any {\n    return item.id || index;\n  }\n\n  /**\n   * Track function for indicators ngFor performance optimization\n   */\n  trackIndicatorByFn(index: number, item: IndicatorData): any {\n    return item.id || index;\n  }\n\n  /**\n   * Math helper for templates\n   */\n  get Math() {\n    return Math;\n  }\n\n  /**\n   * Check if indicators section should be displayed\n   */\n  shouldShowIndicators(): boolean {\n    return this.backendConnected && this.indicatorsData.length > 0;\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule } from '@angular/forms';\nimport { RouterModule, Routes } from '@angular/router';\n\nimport { BudgetDashboardComponent } from './budget-dashboard.component';\n\nconst routes: Routes = [\n  {\n    path: '',\n    component: BudgetDashboardComponent\n  }\n];\n\n@NgModule({\n  declarations: [\n    BudgetDashboardComponent\n  ],\n  imports: [\n    CommonModule,\n    FormsModule,\n    RouterModule.forChild(routes)\n  ]\n})\nexport class BudgetDashboardModule { }\n"]}