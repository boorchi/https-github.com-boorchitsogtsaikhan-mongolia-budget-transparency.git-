{"version":3,"sources":["webpack:///node_modules/@angular/material/__ivy_ngcc__/fesm2015/grid-list.js","webpack:///src/app/modules/ulsiintusuvcharts/ulsiintusuvcharts.component.ts","webpack:///src/app/modules/ulsiintusuvcharts/ulsiintusuvcharts.component.html","webpack:///src/app/modules/ulsiintusuvcharts/ulsiintusuvcharts.module.ts"],"names":["_c0","_c1","_c2","MAT_GRID_LIST","MatGridListBase","MatGridTile","_element","_gridList","_rowspan","_colspan","value","Math","round","_setStyle","property","nativeElement","style","ɵfac","MatGridTile_Factory","t","ɵcmp","type","selectors","hostAttrs","hostVars","hostBindings","MatGridTile_HostBindings","rf","ctx","rowspan","colspan","inputs","exportAs","ngContentSelectors","decls","vars","consts","template","MatGridTile_Template","styles","encapsulation","changeDetection","ctorParameters","undefined","decorators","args","propDecorators","selector","host","None","OnPush","MatGridTileText","ngAfterContentInit","_lines","MatGridTileText_Factory","contentQueries","MatGridTileText_ContentQueries","dirIndex","_t","MatGridTileText_Template","descendants","MatGridAvatarCssMatStyler","MatGridAvatarCssMatStyler_Factory","ɵdir","MatGridTileHeaderCssMatStyler","MatGridTileHeaderCssMatStyler_Factory","MatGridTileFooterCssMatStyler","MatGridTileFooterCssMatStyler_Factory","Tile","TileCoordinator","columnIndex","rowIndex","lastRowMax","max","tracker","rowCount","update","numColumns","tiles","Array","fill","length","positions","map","tile","_trackTile","gapStartIndex","_findMatchingGap","_markTilePosition","TilePosition","tileCols","Error","gapEndIndex","_nextRow","indexOf","_findGapEndIndex","i","start","row","col","cssCalcAllowedValue","TileStyler","_rows","init","gutterSize","cols","direction","_gutterSize","normalizeUnits","_cols","_direction","getBaseTileSize","sizePercent","gutterFraction","getTilePosition","baseSize","offset","calc","getTileSize","span","setStyle","colIndex","percentWidthPerTile","gutterWidthFractionPerTile","setColStyles","setRowStyles","percentWidth","gutterWidth","baseTileWidth","side","getGutterSpan","getTileSpan","tileHeight","getComputedHeight","FixedTileStyler","fixedRowHeight","test","reset","list","_setListStyle","_tiles","forEach","RatioTileStyler","_parseRatio","percentHeightPerTile","rowHeightRatio","baseTileHeight","ratioParts","split","parseFloat","FitTileStyler","gutterHeightPerTile","exp","match","MAT_FIT_MODE","MatGridList","_dir","_gutter","_rowHeight","newValue","_setTileStyler","ngOnInit","_checkCols","_checkRowHeight","ngAfterContentChecked","_layoutTiles","rowHeight","_tileStyler","_tileCoordinator","filter","index","pos","MatGridList_Factory","MatGridList_ContentQueries","MatGridList_HostBindings","features","provide","useExisting","MatGridList_Template","providers","MatGridListModule","ɵmod","ɵinj","factory","MatGridListModule_Factory","imports","ngJitMode","declarations","exports","UlsiintusuvchartsComponent","mainService","router","isDataLoaded","colors","width","labelWidth","fontSize","params","year","category","onResize","events","subscribe","val","url","setQueryParam","event","screenHeight","window","innerHeight","screenWidth","innerWidth","console","log","legend","param","query","entry","p","getWidth","handleSelect","chartContext","config","orlogoSub","sub","dataPointIndex","chartOptions","fontFamily","series","values","chart","legendClick","seriesIndex","dataPointSelection","dataLabels","enabled","dropShadow","labels","names","stroke","show","position","horizontalAlign","offsetX","tooltip","y","formatter","toFixed","replace","title","seriesName","plotOptions","pie","donut","size","responsive","breakpoint","options","getType","checkType","templateUrl","styleUrls","UlsiintusuvchartsModule","schemas"],"mappings":"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","file":"default~orlogo-orlogo-module~ulsiintusuv-ulsiintusuv-module~zarlag-zarlag-module-es5.js","sourcesContent":["import { InjectionToken, Component, ViewEncapsulation, ChangeDetectionStrategy, ElementRef, Optional, Inject, Input, ContentChildren, Directive, NgModule } from '@angular/core';\nimport { setLines, MatLine, MatLineModule, MatCommonModule } from '@angular/material/core';\nimport { coerceNumberProperty } from '@angular/cdk/coercion';\nimport { Directionality } from '@angular/cdk/bidi';\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/material/grid-list/grid-list-base.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Injection token used to provide a grid list to a tile and to avoid circular imports.\n * \\@docs-private\n * @type {?}\n */\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/cdk/bidi';\n\nconst _c0 = [\"*\"];\nconst _c1 = [[[\"\", \"mat-grid-avatar\", \"\"], [\"\", \"matGridAvatar\", \"\"]], [[\"\", \"mat-line\", \"\"], [\"\", \"matLine\", \"\"]], \"*\"];\nconst _c2 = [\"[mat-grid-avatar], [matGridAvatar]\", \"[mat-line], [matLine]\", \"*\"];\nconst MAT_GRID_LIST = new InjectionToken('MAT_GRID_LIST');\n/**\n * Base interface for a `MatGridList`.\n * \\@docs-private\n * @record\n */\nfunction MatGridListBase() { }\nif (false) {\n    /** @type {?} */\n    MatGridListBase.prototype.cols;\n    /** @type {?} */\n    MatGridListBase.prototype.gutterSize;\n    /** @type {?} */\n    MatGridListBase.prototype.rowHeight;\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/material/grid-list/grid-tile.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nclass MatGridTile {\n    /**\n     * @param {?} _element\n     * @param {?=} _gridList\n     */\n    constructor(_element, _gridList) {\n        this._element = _element;\n        this._gridList = _gridList;\n        this._rowspan = 1;\n        this._colspan = 1;\n    }\n    /**\n     * Amount of rows that the grid tile takes up.\n     * @return {?}\n     */\n    get rowspan() { return this._rowspan; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set rowspan(value) { this._rowspan = Math.round(coerceNumberProperty(value)); }\n    /**\n     * Amount of columns that the grid tile takes up.\n     * @return {?}\n     */\n    get colspan() { return this._colspan; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set colspan(value) { this._colspan = Math.round(coerceNumberProperty(value)); }\n    /**\n     * Sets the style of the grid-tile element.  Needs to be set manually to avoid\n     * \"Changed after checked\" errors that would occur with HostBinding.\n     * @param {?} property\n     * @param {?} value\n     * @return {?}\n     */\n    _setStyle(property, value) {\n        ((/** @type {?} */ (this._element.nativeElement.style)))[property] = value;\n    }\n}\nMatGridTile.ɵfac = function MatGridTile_Factory(t) { return new (t || MatGridTile)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(MAT_GRID_LIST, 8)); };\nMatGridTile.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: MatGridTile, selectors: [[\"mat-grid-tile\"]], hostAttrs: [1, \"mat-grid-tile\"], hostVars: 2, hostBindings: function MatGridTile_HostBindings(rf, ctx) { if (rf & 2) {\n        ɵngcc0.ɵɵattribute(\"rowspan\", ctx.rowspan)(\"colspan\", ctx.colspan);\n    } }, inputs: { rowspan: \"rowspan\", colspan: \"colspan\" }, exportAs: [\"matGridTile\"], ngContentSelectors: _c0, decls: 2, vars: 0, consts: [[1, \"mat-figure\"]], template: function MatGridTile_Template(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵprojectionDef();\n        ɵngcc0.ɵɵelementStart(0, \"figure\", 0);\n        ɵngcc0.ɵɵprojection(1);\n        ɵngcc0.ɵɵelementEnd();\n    } }, styles: [\".mat-grid-list{display:block;position:relative}.mat-grid-tile{display:block;position:absolute;overflow:hidden}.mat-grid-tile .mat-figure{top:0;left:0;right:0;bottom:0;position:absolute;display:flex;align-items:center;justify-content:center;height:100%;padding:0;margin:0}.mat-grid-tile .mat-grid-tile-header,.mat-grid-tile .mat-grid-tile-footer{display:flex;align-items:center;height:48px;color:#fff;background:rgba(0,0,0,.38);overflow:hidden;padding:0 16px;position:absolute;left:0;right:0}.mat-grid-tile .mat-grid-tile-header>*,.mat-grid-tile .mat-grid-tile-footer>*{margin:0;padding:0;font-weight:normal;font-size:inherit}.mat-grid-tile .mat-grid-tile-header.mat-2-line,.mat-grid-tile .mat-grid-tile-footer.mat-2-line{height:68px}.mat-grid-tile .mat-grid-list-text{display:flex;flex-direction:column;width:100%;box-sizing:border-box;overflow:hidden}.mat-grid-tile .mat-grid-list-text>*{margin:0;padding:0;font-weight:normal;font-size:inherit}.mat-grid-tile .mat-grid-list-text:empty{display:none}.mat-grid-tile .mat-grid-tile-header{top:0}.mat-grid-tile .mat-grid-tile-footer{bottom:0}.mat-grid-tile .mat-grid-avatar{padding-right:16px}[dir=rtl] .mat-grid-tile .mat-grid-avatar{padding-right:0;padding-left:16px}.mat-grid-tile .mat-grid-avatar:empty{display:none}\\n\"], encapsulation: 2, changeDetection: 0 });\n/** @nocollapse */\nMatGridTile.ctorParameters = () => [\n    { type: ElementRef },\n    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [MAT_GRID_LIST,] }] }\n];\nMatGridTile.propDecorators = {\n    rowspan: [{ type: Input }],\n    colspan: [{ type: Input }]\n};\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MatGridTile, [{\n        type: Component,\n        args: [{\n                selector: 'mat-grid-tile',\n                exportAs: 'matGridTile',\n                host: {\n                    'class': 'mat-grid-tile',\n                    // Ensures that the \"rowspan\" and \"colspan\" input value is reflected in\n                    // the DOM. This is needed for the grid-tile harness.\n                    '[attr.rowspan]': 'rowspan',\n                    '[attr.colspan]': 'colspan'\n                },\n                template: \"<!-- TODO(kara): Revisit why this is a figure.-->\\n<figure class=\\\"mat-figure\\\">\\n  <ng-content></ng-content>\\n</figure>\",\n                encapsulation: ViewEncapsulation.None,\n                changeDetection: ChangeDetectionStrategy.OnPush,\n                styles: [\".mat-grid-list{display:block;position:relative}.mat-grid-tile{display:block;position:absolute;overflow:hidden}.mat-grid-tile .mat-figure{top:0;left:0;right:0;bottom:0;position:absolute;display:flex;align-items:center;justify-content:center;height:100%;padding:0;margin:0}.mat-grid-tile .mat-grid-tile-header,.mat-grid-tile .mat-grid-tile-footer{display:flex;align-items:center;height:48px;color:#fff;background:rgba(0,0,0,.38);overflow:hidden;padding:0 16px;position:absolute;left:0;right:0}.mat-grid-tile .mat-grid-tile-header>*,.mat-grid-tile .mat-grid-tile-footer>*{margin:0;padding:0;font-weight:normal;font-size:inherit}.mat-grid-tile .mat-grid-tile-header.mat-2-line,.mat-grid-tile .mat-grid-tile-footer.mat-2-line{height:68px}.mat-grid-tile .mat-grid-list-text{display:flex;flex-direction:column;width:100%;box-sizing:border-box;overflow:hidden}.mat-grid-tile .mat-grid-list-text>*{margin:0;padding:0;font-weight:normal;font-size:inherit}.mat-grid-tile .mat-grid-list-text:empty{display:none}.mat-grid-tile .mat-grid-tile-header{top:0}.mat-grid-tile .mat-grid-tile-footer{bottom:0}.mat-grid-tile .mat-grid-avatar{padding-right:16px}[dir=rtl] .mat-grid-tile .mat-grid-avatar{padding-right:0;padding-left:16px}.mat-grid-tile .mat-grid-avatar:empty{display:none}\\n\"]\n            }]\n    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: undefined, decorators: [{\n                type: Optional\n            }, {\n                type: Inject,\n                args: [MAT_GRID_LIST]\n            }] }]; }, { rowspan: [{\n            type: Input\n        }], colspan: [{\n            type: Input\n        }] }); })();\nif (false) {\n    /** @type {?} */\n    MatGridTile.ngAcceptInputType_rowspan;\n    /** @type {?} */\n    MatGridTile.ngAcceptInputType_colspan;\n    /** @type {?} */\n    MatGridTile.prototype._rowspan;\n    /** @type {?} */\n    MatGridTile.prototype._colspan;\n    /**\n     * @type {?}\n     * @private\n     */\n    MatGridTile.prototype._element;\n    /** @type {?} */\n    MatGridTile.prototype._gridList;\n}\nclass MatGridTileText {\n    /**\n     * @param {?} _element\n     */\n    constructor(_element) {\n        this._element = _element;\n    }\n    /**\n     * @return {?}\n     */\n    ngAfterContentInit() {\n        setLines(this._lines, this._element);\n    }\n}\nMatGridTileText.ɵfac = function MatGridTileText_Factory(t) { return new (t || MatGridTileText)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef)); };\nMatGridTileText.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: MatGridTileText, selectors: [[\"mat-grid-tile-header\"], [\"mat-grid-tile-footer\"]], contentQueries: function MatGridTileText_ContentQueries(rf, ctx, dirIndex) { if (rf & 1) {\n        ɵngcc0.ɵɵcontentQuery(dirIndex, MatLine, true);\n    } if (rf & 2) {\n        var _t;\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._lines = _t);\n    } }, ngContentSelectors: _c2, decls: 4, vars: 0, consts: [[1, \"mat-grid-list-text\"]], template: function MatGridTileText_Template(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵprojectionDef(_c1);\n        ɵngcc0.ɵɵprojection(0);\n        ɵngcc0.ɵɵelementStart(1, \"div\", 0);\n        ɵngcc0.ɵɵprojection(2, 1);\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵprojection(3, 2);\n    } }, encapsulation: 2, changeDetection: 0 });\n/** @nocollapse */\nMatGridTileText.ctorParameters = () => [\n    { type: ElementRef }\n];\nMatGridTileText.propDecorators = {\n    _lines: [{ type: ContentChildren, args: [MatLine, { descendants: true },] }]\n};\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MatGridTileText, [{\n        type: Component,\n        args: [{\n                selector: 'mat-grid-tile-header, mat-grid-tile-footer',\n                template: \"<ng-content select=\\\"[mat-grid-avatar], [matGridAvatar]\\\"></ng-content>\\n<div class=\\\"mat-grid-list-text\\\"><ng-content select=\\\"[mat-line], [matLine]\\\"></ng-content></div>\\n<ng-content></ng-content>\\n\",\n                changeDetection: ChangeDetectionStrategy.OnPush,\n                encapsulation: ViewEncapsulation.None\n            }]\n    }], function () { return [{ type: ɵngcc0.ElementRef }]; }, { _lines: [{\n            type: ContentChildren,\n            args: [MatLine, { descendants: true }]\n        }] }); })();\nif (false) {\n    /** @type {?} */\n    MatGridTileText.prototype._lines;\n    /**\n     * @type {?}\n     * @private\n     */\n    MatGridTileText.prototype._element;\n}\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * \\@docs-private\n */\nclass MatGridAvatarCssMatStyler {\n}\nMatGridAvatarCssMatStyler.ɵfac = function MatGridAvatarCssMatStyler_Factory(t) { return new (t || MatGridAvatarCssMatStyler)(); };\nMatGridAvatarCssMatStyler.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: MatGridAvatarCssMatStyler, selectors: [[\"\", \"mat-grid-avatar\", \"\"], [\"\", \"matGridAvatar\", \"\"]], hostAttrs: [1, \"mat-grid-avatar\"] });\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MatGridAvatarCssMatStyler, [{\n        type: Directive,\n        args: [{\n                selector: '[mat-grid-avatar], [matGridAvatar]',\n                host: { 'class': 'mat-grid-avatar' }\n            }]\n    }], null, null); })();\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * \\@docs-private\n */\nclass MatGridTileHeaderCssMatStyler {\n}\nMatGridTileHeaderCssMatStyler.ɵfac = function MatGridTileHeaderCssMatStyler_Factory(t) { return new (t || MatGridTileHeaderCssMatStyler)(); };\nMatGridTileHeaderCssMatStyler.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: MatGridTileHeaderCssMatStyler, selectors: [[\"mat-grid-tile-header\"]], hostAttrs: [1, \"mat-grid-tile-header\"] });\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MatGridTileHeaderCssMatStyler, [{\n        type: Directive,\n        args: [{\n                selector: 'mat-grid-tile-header',\n                host: { 'class': 'mat-grid-tile-header' }\n            }]\n    }], null, null); })();\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * \\@docs-private\n */\nclass MatGridTileFooterCssMatStyler {\n}\nMatGridTileFooterCssMatStyler.ɵfac = function MatGridTileFooterCssMatStyler_Factory(t) { return new (t || MatGridTileFooterCssMatStyler)(); };\nMatGridTileFooterCssMatStyler.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: MatGridTileFooterCssMatStyler, selectors: [[\"mat-grid-tile-footer\"]], hostAttrs: [1, \"mat-grid-tile-footer\"] });\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MatGridTileFooterCssMatStyler, [{\n        type: Directive,\n        args: [{\n                selector: 'mat-grid-tile-footer',\n                host: { 'class': 'mat-grid-tile-footer' }\n            }]\n    }], null, null); })();\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/material/grid-list/tile-coordinator.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Interface describing a tile.\n * \\@docs-private\n * @record\n */\nfunction Tile() { }\nif (false) {\n    /**\n     * Amount of rows that the tile takes up.\n     * @type {?}\n     */\n    Tile.prototype.rowspan;\n    /**\n     * Amount of columns that the tile takes up.\n     * @type {?}\n     */\n    Tile.prototype.colspan;\n}\n/**\n * Class for determining, from a list of tiles, the (row, col) position of each of those tiles\n * in the grid. This is necessary (rather than just rendering the tiles in normal document flow)\n * because the tiles can have a rowspan.\n *\n * The positioning algorithm greedily places each tile as soon as it encounters a gap in the grid\n * large enough to accommodate it so that the tiles still render in the same order in which they\n * are given.\n *\n * The basis of the algorithm is the use of an array to track the already placed tiles. Each\n * element of the array corresponds to a column, and the value indicates how many cells in that\n * column are already occupied; zero indicates an empty cell. Moving \"down\" to the next row\n * decrements each value in the tracking array (indicating that the column is one cell closer to\n * being free).\n *\n * \\@docs-private\n */\nclass TileCoordinator {\n    constructor() {\n        /**\n         * Index at which the search for the next gap will start.\n         */\n        this.columnIndex = 0;\n        /**\n         * The current row index.\n         */\n        this.rowIndex = 0;\n    }\n    /**\n     * Gets the total number of rows occupied by tiles\n     * @return {?}\n     */\n    get rowCount() { return this.rowIndex + 1; }\n    /**\n     * Gets the total span of rows occupied by tiles.\n     * Ex: A list with 1 row that contains a tile with rowspan 2 will have a total rowspan of 2.\n     * @return {?}\n     */\n    get rowspan() {\n        /** @type {?} */\n        const lastRowMax = Math.max(...this.tracker);\n        // if any of the tiles has a rowspan that pushes it beyond the total row count,\n        // add the difference to the rowcount\n        return lastRowMax > 1 ? this.rowCount + lastRowMax - 1 : this.rowCount;\n    }\n    /**\n     * Updates the tile positions.\n     * @param {?} numColumns Amount of columns in the grid.\n     * @param {?} tiles Tiles to be positioned.\n     * @return {?}\n     */\n    update(numColumns, tiles) {\n        this.columnIndex = 0;\n        this.rowIndex = 0;\n        this.tracker = new Array(numColumns);\n        this.tracker.fill(0, 0, this.tracker.length);\n        this.positions = tiles.map((/**\n         * @param {?} tile\n         * @return {?}\n         */\n        tile => this._trackTile(tile)));\n    }\n    /**\n     * Calculates the row and col position of a tile.\n     * @private\n     * @param {?} tile\n     * @return {?}\n     */\n    _trackTile(tile) {\n        // Find a gap large enough for this tile.\n        /** @type {?} */\n        const gapStartIndex = this._findMatchingGap(tile.colspan);\n        // Place tile in the resulting gap.\n        this._markTilePosition(gapStartIndex, tile);\n        // The next time we look for a gap, the search will start at columnIndex, which should be\n        // immediately after the tile that has just been placed.\n        this.columnIndex = gapStartIndex + tile.colspan;\n        return new TilePosition(this.rowIndex, gapStartIndex);\n    }\n    /**\n     * Finds the next available space large enough to fit the tile.\n     * @private\n     * @param {?} tileCols\n     * @return {?}\n     */\n    _findMatchingGap(tileCols) {\n        if (tileCols > this.tracker.length) {\n            throw Error(`mat-grid-list: tile with colspan ${tileCols} is wider than ` +\n                `grid with cols=\"${this.tracker.length}\".`);\n        }\n        // Start index is inclusive, end index is exclusive.\n        /** @type {?} */\n        let gapStartIndex = -1;\n        /** @type {?} */\n        let gapEndIndex = -1;\n        // Look for a gap large enough to fit the given tile. Empty spaces are marked with a zero.\n        do {\n            // If we've reached the end of the row, go to the next row.\n            if (this.columnIndex + tileCols > this.tracker.length) {\n                this._nextRow();\n                gapStartIndex = this.tracker.indexOf(0, this.columnIndex);\n                gapEndIndex = this._findGapEndIndex(gapStartIndex);\n                continue;\n            }\n            gapStartIndex = this.tracker.indexOf(0, this.columnIndex);\n            // If there are no more empty spaces in this row at all, move on to the next row.\n            if (gapStartIndex == -1) {\n                this._nextRow();\n                gapStartIndex = this.tracker.indexOf(0, this.columnIndex);\n                gapEndIndex = this._findGapEndIndex(gapStartIndex);\n                continue;\n            }\n            gapEndIndex = this._findGapEndIndex(gapStartIndex);\n            // If a gap large enough isn't found, we want to start looking immediately after the current\n            // gap on the next iteration.\n            this.columnIndex = gapStartIndex + 1;\n            // Continue iterating until we find a gap wide enough for this tile. Since gapEndIndex is\n            // exclusive, gapEndIndex is 0 means we didn't find a gap and should continue.\n        } while ((gapEndIndex - gapStartIndex < tileCols) || (gapEndIndex == 0));\n        // If we still didn't manage to find a gap, ensure that the index is\n        // at least zero so the tile doesn't get pulled out of the grid.\n        return Math.max(gapStartIndex, 0);\n    }\n    /**\n     * Move \"down\" to the next row.\n     * @private\n     * @return {?}\n     */\n    _nextRow() {\n        this.columnIndex = 0;\n        this.rowIndex++;\n        // Decrement all spaces by one to reflect moving down one row.\n        for (let i = 0; i < this.tracker.length; i++) {\n            this.tracker[i] = Math.max(0, this.tracker[i] - 1);\n        }\n    }\n    /**\n     * Finds the end index (exclusive) of a gap given the index from which to start looking.\n     * The gap ends when a non-zero value is found.\n     * @private\n     * @param {?} gapStartIndex\n     * @return {?}\n     */\n    _findGapEndIndex(gapStartIndex) {\n        for (let i = gapStartIndex + 1; i < this.tracker.length; i++) {\n            if (this.tracker[i] != 0) {\n                return i;\n            }\n        }\n        // The gap ends with the end of the row.\n        return this.tracker.length;\n    }\n    /**\n     * Update the tile tracker to account for the given tile in the given space.\n     * @private\n     * @param {?} start\n     * @param {?} tile\n     * @return {?}\n     */\n    _markTilePosition(start, tile) {\n        for (let i = 0; i < tile.colspan; i++) {\n            this.tracker[start + i] = tile.rowspan;\n        }\n    }\n}\nif (false) {\n    /**\n     * Tracking array (see class description).\n     * @type {?}\n     */\n    TileCoordinator.prototype.tracker;\n    /**\n     * Index at which the search for the next gap will start.\n     * @type {?}\n     */\n    TileCoordinator.prototype.columnIndex;\n    /**\n     * The current row index.\n     * @type {?}\n     */\n    TileCoordinator.prototype.rowIndex;\n    /**\n     * The computed (row, col) position of each tile (the output).\n     * @type {?}\n     */\n    TileCoordinator.prototype.positions;\n}\n/**\n * Simple data structure for tile position (row, col).\n * \\@docs-private\n */\nclass TilePosition {\n    /**\n     * @param {?} row\n     * @param {?} col\n     */\n    constructor(row, col) {\n        this.row = row;\n        this.col = col;\n    }\n}\nif (false) {\n    /** @type {?} */\n    TilePosition.prototype.row;\n    /** @type {?} */\n    TilePosition.prototype.col;\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/material/grid-list/tile-styler.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * RegExp that can be used to check whether a value will\n * be allowed inside a CSS `calc()` expression.\n * @type {?}\n */\nconst cssCalcAllowedValue = /^-?\\d+((\\.\\d+)?[A-Za-z%$]?)+$/;\n/**\n * Sets the style properties for an individual tile, given the position calculated by the\n * Tile Coordinator.\n * \\@docs-private\n * @abstract\n */\nclass TileStyler {\n    constructor() {\n        this._rows = 0;\n        this._rowspan = 0;\n    }\n    /**\n     * Adds grid-list layout info once it is available. Cannot be processed in the constructor\n     * because these properties haven't been calculated by that point.\n     *\n     * @param {?} gutterSize Size of the grid's gutter.\n     * @param {?} tracker Instance of the TileCoordinator.\n     * @param {?} cols Amount of columns in the grid.\n     * @param {?} direction Layout direction of the grid.\n     * @return {?}\n     */\n    init(gutterSize, tracker, cols, direction) {\n        this._gutterSize = normalizeUnits(gutterSize);\n        this._rows = tracker.rowCount;\n        this._rowspan = tracker.rowspan;\n        this._cols = cols;\n        this._direction = direction;\n    }\n    /**\n     * Computes the amount of space a single 1x1 tile would take up (width or height).\n     * Used as a basis for other calculations.\n     * @param {?} sizePercent Percent of the total grid-list space that one 1x1 tile would take up.\n     * @param {?} gutterFraction Fraction of the gutter size taken up by one 1x1 tile.\n     * @return {?} The size of a 1x1 tile as an expression that can be evaluated via CSS calc().\n     */\n    getBaseTileSize(sizePercent, gutterFraction) {\n        // Take the base size percent (as would be if evenly dividing the size between cells),\n        // and then subtracting the size of one gutter. However, since there are no gutters on the\n        // edges, each tile only uses a fraction (gutterShare = numGutters / numCells) of the gutter\n        // size. (Imagine having one gutter per tile, and then breaking up the extra gutter on the\n        // edge evenly among the cells).\n        return `(${sizePercent}% - (${this._gutterSize} * ${gutterFraction}))`;\n    }\n    /**\n     * Gets The horizontal or vertical position of a tile, e.g., the 'top' or 'left' property value.\n     * @param {?} baseSize Base size of a 1x1 tile (as computed in getBaseTileSize).\n     * @param {?} offset Number of tiles that have already been rendered in the row/column.\n     * @return {?} Position of the tile as a CSS calc() expression.\n     */\n    getTilePosition(baseSize, offset) {\n        // The position comes the size of a 1x1 tile plus gutter for each previous tile in the\n        // row/column (offset).\n        return offset === 0 ? '0' : calc(`(${baseSize} + ${this._gutterSize}) * ${offset}`);\n    }\n    /**\n     * Gets the actual size of a tile, e.g., width or height, taking rowspan or colspan into account.\n     * @param {?} baseSize Base size of a 1x1 tile (as computed in getBaseTileSize).\n     * @param {?} span The tile's rowspan or colspan.\n     * @return {?} Size of the tile as a CSS calc() expression.\n     */\n    getTileSize(baseSize, span) {\n        return `(${baseSize} * ${span}) + (${span - 1} * ${this._gutterSize})`;\n    }\n    /**\n     * Sets the style properties to be applied to a tile for the given row and column index.\n     * @param {?} tile Tile to which to apply the styling.\n     * @param {?} rowIndex Index of the tile's row.\n     * @param {?} colIndex Index of the tile's column.\n     * @return {?}\n     */\n    setStyle(tile, rowIndex, colIndex) {\n        // Percent of the available horizontal space that one column takes up.\n        /** @type {?} */\n        let percentWidthPerTile = 100 / this._cols;\n        // Fraction of the vertical gutter size that each column takes up.\n        // For example, if there are 5 columns, each column uses 4/5 = 0.8 times the gutter width.\n        /** @type {?} */\n        let gutterWidthFractionPerTile = (this._cols - 1) / this._cols;\n        this.setColStyles(tile, colIndex, percentWidthPerTile, gutterWidthFractionPerTile);\n        this.setRowStyles(tile, rowIndex, percentWidthPerTile, gutterWidthFractionPerTile);\n    }\n    /**\n     * Sets the horizontal placement of the tile in the list.\n     * @param {?} tile\n     * @param {?} colIndex\n     * @param {?} percentWidth\n     * @param {?} gutterWidth\n     * @return {?}\n     */\n    setColStyles(tile, colIndex, percentWidth, gutterWidth) {\n        // Base horizontal size of a column.\n        /** @type {?} */\n        let baseTileWidth = this.getBaseTileSize(percentWidth, gutterWidth);\n        // The width and horizontal position of each tile is always calculated the same way, but the\n        // height and vertical position depends on the rowMode.\n        /** @type {?} */\n        let side = this._direction === 'rtl' ? 'right' : 'left';\n        tile._setStyle(side, this.getTilePosition(baseTileWidth, colIndex));\n        tile._setStyle('width', calc(this.getTileSize(baseTileWidth, tile.colspan)));\n    }\n    /**\n     * Calculates the total size taken up by gutters across one axis of a list.\n     * @return {?}\n     */\n    getGutterSpan() {\n        return `${this._gutterSize} * (${this._rowspan} - 1)`;\n    }\n    /**\n     * Calculates the total size taken up by tiles across one axis of a list.\n     * @param {?} tileHeight Height of the tile.\n     * @return {?}\n     */\n    getTileSpan(tileHeight) {\n        return `${this._rowspan} * ${this.getTileSize(tileHeight, 1)}`;\n    }\n    /**\n     * Calculates the computed height and returns the correct style property to set.\n     * This method can be implemented by each type of TileStyler.\n     * \\@docs-private\n     * @return {?}\n     */\n    getComputedHeight() { return null; }\n}\nif (false) {\n    /** @type {?} */\n    TileStyler.prototype._gutterSize;\n    /** @type {?} */\n    TileStyler.prototype._rows;\n    /** @type {?} */\n    TileStyler.prototype._rowspan;\n    /** @type {?} */\n    TileStyler.prototype._cols;\n    /** @type {?} */\n    TileStyler.prototype._direction;\n    /**\n     * Sets the vertical placement of the tile in the list.\n     * This method will be implemented by each type of TileStyler.\n     * \\@docs-private\n     * @abstract\n     * @param {?} tile\n     * @param {?} rowIndex\n     * @param {?} percentWidth\n     * @param {?} gutterWidth\n     * @return {?}\n     */\n    TileStyler.prototype.setRowStyles = function (tile, rowIndex, percentWidth, gutterWidth) { };\n    /**\n     * Called when the tile styler is swapped out with a different one. To be used for cleanup.\n     * \\@docs-private\n     * @abstract\n     * @param {?} list Grid list that the styler was attached to.\n     * @return {?}\n     */\n    TileStyler.prototype.reset = function (list) { };\n}\n/**\n * This type of styler is instantiated when the user passes in a fixed row height.\n * Example `<mat-grid-list cols=\"3\" rowHeight=\"100px\">`\n * \\@docs-private\n */\nclass FixedTileStyler extends TileStyler {\n    /**\n     * @param {?} fixedRowHeight\n     */\n    constructor(fixedRowHeight) {\n        super();\n        this.fixedRowHeight = fixedRowHeight;\n    }\n    /**\n     * @param {?} gutterSize\n     * @param {?} tracker\n     * @param {?} cols\n     * @param {?} direction\n     * @return {?}\n     */\n    init(gutterSize, tracker, cols, direction) {\n        super.init(gutterSize, tracker, cols, direction);\n        this.fixedRowHeight = normalizeUnits(this.fixedRowHeight);\n        if (!cssCalcAllowedValue.test(this.fixedRowHeight)) {\n            throw Error(`Invalid value \"${this.fixedRowHeight}\" set as rowHeight.`);\n        }\n    }\n    /**\n     * @param {?} tile\n     * @param {?} rowIndex\n     * @return {?}\n     */\n    setRowStyles(tile, rowIndex) {\n        tile._setStyle('top', this.getTilePosition(this.fixedRowHeight, rowIndex));\n        tile._setStyle('height', calc(this.getTileSize(this.fixedRowHeight, tile.rowspan)));\n    }\n    /**\n     * @return {?}\n     */\n    getComputedHeight() {\n        return [\n            'height', calc(`${this.getTileSpan(this.fixedRowHeight)} + ${this.getGutterSpan()}`)\n        ];\n    }\n    /**\n     * @param {?} list\n     * @return {?}\n     */\n    reset(list) {\n        list._setListStyle(['height', null]);\n        if (list._tiles) {\n            list._tiles.forEach((/**\n             * @param {?} tile\n             * @return {?}\n             */\n            tile => {\n                tile._setStyle('top', null);\n                tile._setStyle('height', null);\n            }));\n        }\n    }\n}\nif (false) {\n    /** @type {?} */\n    FixedTileStyler.prototype.fixedRowHeight;\n}\n/**\n * This type of styler is instantiated when the user passes in a width:height ratio\n * for the row height.  Example `<mat-grid-list cols=\"3\" rowHeight=\"3:1\">`\n * \\@docs-private\n */\nclass RatioTileStyler extends TileStyler {\n    /**\n     * @param {?} value\n     */\n    constructor(value) {\n        super();\n        this._parseRatio(value);\n    }\n    /**\n     * @param {?} tile\n     * @param {?} rowIndex\n     * @param {?} percentWidth\n     * @param {?} gutterWidth\n     * @return {?}\n     */\n    setRowStyles(tile, rowIndex, percentWidth, gutterWidth) {\n        /** @type {?} */\n        let percentHeightPerTile = percentWidth / this.rowHeightRatio;\n        this.baseTileHeight = this.getBaseTileSize(percentHeightPerTile, gutterWidth);\n        // Use padding-top and margin-top to maintain the given aspect ratio, as\n        // a percentage-based value for these properties is applied versus the *width* of the\n        // containing block. See http://www.w3.org/TR/CSS2/box.html#margin-properties\n        tile._setStyle('marginTop', this.getTilePosition(this.baseTileHeight, rowIndex));\n        tile._setStyle('paddingTop', calc(this.getTileSize(this.baseTileHeight, tile.rowspan)));\n    }\n    /**\n     * @return {?}\n     */\n    getComputedHeight() {\n        return [\n            'paddingBottom', calc(`${this.getTileSpan(this.baseTileHeight)} + ${this.getGutterSpan()}`)\n        ];\n    }\n    /**\n     * @param {?} list\n     * @return {?}\n     */\n    reset(list) {\n        list._setListStyle(['paddingBottom', null]);\n        list._tiles.forEach((/**\n         * @param {?} tile\n         * @return {?}\n         */\n        tile => {\n            tile._setStyle('marginTop', null);\n            tile._setStyle('paddingTop', null);\n        }));\n    }\n    /**\n     * @private\n     * @param {?} value\n     * @return {?}\n     */\n    _parseRatio(value) {\n        /** @type {?} */\n        const ratioParts = value.split(':');\n        if (ratioParts.length !== 2) {\n            throw Error(`mat-grid-list: invalid ratio given for row-height: \"${value}\"`);\n        }\n        this.rowHeightRatio = parseFloat(ratioParts[0]) / parseFloat(ratioParts[1]);\n    }\n}\nif (false) {\n    /**\n     * Ratio width:height given by user to determine row height.\n     * @type {?}\n     */\n    RatioTileStyler.prototype.rowHeightRatio;\n    /** @type {?} */\n    RatioTileStyler.prototype.baseTileHeight;\n}\n/**\n * This type of styler is instantiated when the user selects a \"fit\" row height mode.\n * In other words, the row height will reflect the total height of the container divided\n * by the number of rows.  Example `<mat-grid-list cols=\"3\" rowHeight=\"fit\">`\n *\n * \\@docs-private\n */\nclass FitTileStyler extends TileStyler {\n    /**\n     * @param {?} tile\n     * @param {?} rowIndex\n     * @return {?}\n     */\n    setRowStyles(tile, rowIndex) {\n        // Percent of the available vertical space that one row takes up.\n        /** @type {?} */\n        let percentHeightPerTile = 100 / this._rowspan;\n        // Fraction of the horizontal gutter size that each column takes up.\n        /** @type {?} */\n        let gutterHeightPerTile = (this._rows - 1) / this._rows;\n        // Base vertical size of a column.\n        /** @type {?} */\n        let baseTileHeight = this.getBaseTileSize(percentHeightPerTile, gutterHeightPerTile);\n        tile._setStyle('top', this.getTilePosition(baseTileHeight, rowIndex));\n        tile._setStyle('height', calc(this.getTileSize(baseTileHeight, tile.rowspan)));\n    }\n    /**\n     * @param {?} list\n     * @return {?}\n     */\n    reset(list) {\n        if (list._tiles) {\n            list._tiles.forEach((/**\n             * @param {?} tile\n             * @return {?}\n             */\n            tile => {\n                tile._setStyle('top', null);\n                tile._setStyle('height', null);\n            }));\n        }\n    }\n}\n/**\n * Wraps a CSS string in a calc function\n * @param {?} exp\n * @return {?}\n */\nfunction calc(exp) {\n    return `calc(${exp})`;\n}\n/**\n * Appends pixels to a CSS string if no units are given.\n * @param {?} value\n * @return {?}\n */\nfunction normalizeUnits(value) {\n    return value.match(/([A-Za-z%]+)$/) ? value : `${value}px`;\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/material/grid-list/grid-list.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n// TODO(kara): Conditional (responsive) column count / row size.\n// TODO(kara): Re-layout on window resize / media change (debounced).\n// TODO(kara): gridTileHeader and gridTileFooter.\n/** @type {?} */\nconst MAT_FIT_MODE = 'fit';\nclass MatGridList {\n    /**\n     * @param {?} _element\n     * @param {?} _dir\n     */\n    constructor(_element, _dir) {\n        this._element = _element;\n        this._dir = _dir;\n        /**\n         * The amount of space between tiles. This will be something like '5px' or '2em'.\n         */\n        this._gutter = '1px';\n    }\n    /**\n     * Amount of columns in the grid list.\n     * @return {?}\n     */\n    get cols() { return this._cols; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set cols(value) {\n        this._cols = Math.max(1, Math.round(coerceNumberProperty(value)));\n    }\n    /**\n     * Size of the grid list's gutter in pixels.\n     * @return {?}\n     */\n    get gutterSize() { return this._gutter; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set gutterSize(value) { this._gutter = `${value == null ? '' : value}`; }\n    /**\n     * Set internal representation of row height from the user-provided value.\n     * @return {?}\n     */\n    get rowHeight() { return this._rowHeight; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set rowHeight(value) {\n        /** @type {?} */\n        const newValue = `${value == null ? '' : value}`;\n        if (newValue !== this._rowHeight) {\n            this._rowHeight = newValue;\n            this._setTileStyler(this._rowHeight);\n        }\n    }\n    /**\n     * @return {?}\n     */\n    ngOnInit() {\n        this._checkCols();\n        this._checkRowHeight();\n    }\n    /**\n     * The layout calculation is fairly cheap if nothing changes, so there's little cost\n     * to run it frequently.\n     * @return {?}\n     */\n    ngAfterContentChecked() {\n        this._layoutTiles();\n    }\n    /**\n     * Throw a friendly error if cols property is missing\n     * @private\n     * @return {?}\n     */\n    _checkCols() {\n        if (!this.cols) {\n            throw Error(`mat-grid-list: must pass in number of columns. ` +\n                `Example: <mat-grid-list cols=\"3\">`);\n        }\n    }\n    /**\n     * Default to equal width:height if rowHeight property is missing\n     * @private\n     * @return {?}\n     */\n    _checkRowHeight() {\n        if (!this._rowHeight) {\n            this._setTileStyler('1:1');\n        }\n    }\n    /**\n     * Creates correct Tile Styler subtype based on rowHeight passed in by user\n     * @private\n     * @param {?} rowHeight\n     * @return {?}\n     */\n    _setTileStyler(rowHeight) {\n        if (this._tileStyler) {\n            this._tileStyler.reset(this);\n        }\n        if (rowHeight === MAT_FIT_MODE) {\n            this._tileStyler = new FitTileStyler();\n        }\n        else if (rowHeight && rowHeight.indexOf(':') > -1) {\n            this._tileStyler = new RatioTileStyler(rowHeight);\n        }\n        else {\n            this._tileStyler = new FixedTileStyler(rowHeight);\n        }\n    }\n    /**\n     * Computes and applies the size and position for all children grid tiles.\n     * @private\n     * @return {?}\n     */\n    _layoutTiles() {\n        if (!this._tileCoordinator) {\n            this._tileCoordinator = new TileCoordinator();\n        }\n        /** @type {?} */\n        const tracker = this._tileCoordinator;\n        /** @type {?} */\n        const tiles = this._tiles.filter((/**\n         * @param {?} tile\n         * @return {?}\n         */\n        tile => !tile._gridList || tile._gridList === this));\n        /** @type {?} */\n        const direction = this._dir ? this._dir.value : 'ltr';\n        this._tileCoordinator.update(this.cols, tiles);\n        this._tileStyler.init(this.gutterSize, tracker, this.cols, direction);\n        tiles.forEach((/**\n         * @param {?} tile\n         * @param {?} index\n         * @return {?}\n         */\n        (tile, index) => {\n            /** @type {?} */\n            const pos = tracker.positions[index];\n            this._tileStyler.setStyle(tile, pos.row, pos.col);\n        }));\n        this._setListStyle(this._tileStyler.getComputedHeight());\n    }\n    /**\n     * Sets style on the main grid-list element, given the style name and value.\n     * @param {?} style\n     * @return {?}\n     */\n    _setListStyle(style) {\n        if (style) {\n            ((/** @type {?} */ (this._element.nativeElement.style)))[style[0]] = style[1];\n        }\n    }\n}\nMatGridList.ɵfac = function MatGridList_Factory(t) { return new (t || MatGridList)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.Directionality, 8)); };\nMatGridList.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: MatGridList, selectors: [[\"mat-grid-list\"]], contentQueries: function MatGridList_ContentQueries(rf, ctx, dirIndex) { if (rf & 1) {\n        ɵngcc0.ɵɵcontentQuery(dirIndex, MatGridTile, true);\n    } if (rf & 2) {\n        var _t;\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._tiles = _t);\n    } }, hostAttrs: [1, \"mat-grid-list\"], hostVars: 1, hostBindings: function MatGridList_HostBindings(rf, ctx) { if (rf & 2) {\n        ɵngcc0.ɵɵattribute(\"cols\", ctx.cols);\n    } }, inputs: { cols: \"cols\", gutterSize: \"gutterSize\", rowHeight: \"rowHeight\" }, exportAs: [\"matGridList\"], features: [ɵngcc0.ɵɵProvidersFeature([{\n                provide: MAT_GRID_LIST,\n                useExisting: MatGridList\n            }])], ngContentSelectors: _c0, decls: 2, vars: 0, template: function MatGridList_Template(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵprojectionDef();\n        ɵngcc0.ɵɵelementStart(0, \"div\");\n        ɵngcc0.ɵɵprojection(1);\n        ɵngcc0.ɵɵelementEnd();\n    } }, styles: [\".mat-grid-list{display:block;position:relative}.mat-grid-tile{display:block;position:absolute;overflow:hidden}.mat-grid-tile .mat-figure{top:0;left:0;right:0;bottom:0;position:absolute;display:flex;align-items:center;justify-content:center;height:100%;padding:0;margin:0}.mat-grid-tile .mat-grid-tile-header,.mat-grid-tile .mat-grid-tile-footer{display:flex;align-items:center;height:48px;color:#fff;background:rgba(0,0,0,.38);overflow:hidden;padding:0 16px;position:absolute;left:0;right:0}.mat-grid-tile .mat-grid-tile-header>*,.mat-grid-tile .mat-grid-tile-footer>*{margin:0;padding:0;font-weight:normal;font-size:inherit}.mat-grid-tile .mat-grid-tile-header.mat-2-line,.mat-grid-tile .mat-grid-tile-footer.mat-2-line{height:68px}.mat-grid-tile .mat-grid-list-text{display:flex;flex-direction:column;width:100%;box-sizing:border-box;overflow:hidden}.mat-grid-tile .mat-grid-list-text>*{margin:0;padding:0;font-weight:normal;font-size:inherit}.mat-grid-tile .mat-grid-list-text:empty{display:none}.mat-grid-tile .mat-grid-tile-header{top:0}.mat-grid-tile .mat-grid-tile-footer{bottom:0}.mat-grid-tile .mat-grid-avatar{padding-right:16px}[dir=rtl] .mat-grid-tile .mat-grid-avatar{padding-right:0;padding-left:16px}.mat-grid-tile .mat-grid-avatar:empty{display:none}\\n\"], encapsulation: 2, changeDetection: 0 });\n/** @nocollapse */\nMatGridList.ctorParameters = () => [\n    { type: ElementRef },\n    { type: Directionality, decorators: [{ type: Optional }] }\n];\nMatGridList.propDecorators = {\n    _tiles: [{ type: ContentChildren, args: [MatGridTile, { descendants: true },] }],\n    cols: [{ type: Input }],\n    gutterSize: [{ type: Input }],\n    rowHeight: [{ type: Input }]\n};\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MatGridList, [{\n        type: Component,\n        args: [{\n                selector: 'mat-grid-list',\n                exportAs: 'matGridList',\n                template: \"<div>\\n  <ng-content></ng-content>\\n</div>\",\n                host: {\n                    'class': 'mat-grid-list',\n                    // Ensures that the \"cols\" input value is reflected in the DOM. This is\n                    // needed for the grid-list harness.\n                    '[attr.cols]': 'cols'\n                },\n                providers: [{\n                        provide: MAT_GRID_LIST,\n                        useExisting: MatGridList\n                    }],\n                changeDetection: ChangeDetectionStrategy.OnPush,\n                encapsulation: ViewEncapsulation.None,\n                styles: [\".mat-grid-list{display:block;position:relative}.mat-grid-tile{display:block;position:absolute;overflow:hidden}.mat-grid-tile .mat-figure{top:0;left:0;right:0;bottom:0;position:absolute;display:flex;align-items:center;justify-content:center;height:100%;padding:0;margin:0}.mat-grid-tile .mat-grid-tile-header,.mat-grid-tile .mat-grid-tile-footer{display:flex;align-items:center;height:48px;color:#fff;background:rgba(0,0,0,.38);overflow:hidden;padding:0 16px;position:absolute;left:0;right:0}.mat-grid-tile .mat-grid-tile-header>*,.mat-grid-tile .mat-grid-tile-footer>*{margin:0;padding:0;font-weight:normal;font-size:inherit}.mat-grid-tile .mat-grid-tile-header.mat-2-line,.mat-grid-tile .mat-grid-tile-footer.mat-2-line{height:68px}.mat-grid-tile .mat-grid-list-text{display:flex;flex-direction:column;width:100%;box-sizing:border-box;overflow:hidden}.mat-grid-tile .mat-grid-list-text>*{margin:0;padding:0;font-weight:normal;font-size:inherit}.mat-grid-tile .mat-grid-list-text:empty{display:none}.mat-grid-tile .mat-grid-tile-header{top:0}.mat-grid-tile .mat-grid-tile-footer{bottom:0}.mat-grid-tile .mat-grid-avatar{padding-right:16px}[dir=rtl] .mat-grid-tile .mat-grid-avatar{padding-right:0;padding-left:16px}.mat-grid-tile .mat-grid-avatar:empty{display:none}\\n\"]\n            }]\n    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: ɵngcc1.Directionality, decorators: [{\n                type: Optional\n            }] }]; }, { cols: [{\n            type: Input\n        }], gutterSize: [{\n            type: Input\n        }], rowHeight: [{\n            type: Input\n        }], _tiles: [{\n            type: ContentChildren,\n            args: [MatGridTile, { descendants: true }]\n        }] }); })();\nif (false) {\n    /** @type {?} */\n    MatGridList.ngAcceptInputType_cols;\n    /**\n     * Number of columns being rendered.\n     * @type {?}\n     * @private\n     */\n    MatGridList.prototype._cols;\n    /**\n     * Used for determiningthe position of each tile in the grid.\n     * @type {?}\n     * @private\n     */\n    MatGridList.prototype._tileCoordinator;\n    /**\n     * Row height value passed in by user. This can be one of three types:\n     * - Number value (ex: \"100px\"):  sets a fixed row height to that value\n     * - Ratio value (ex: \"4:3\"): sets the row height based on width:height ratio\n     * - \"Fit\" mode (ex: \"fit\"): sets the row height to total height divided by number of rows\n     * @type {?}\n     * @private\n     */\n    MatGridList.prototype._rowHeight;\n    /**\n     * The amount of space between tiles. This will be something like '5px' or '2em'.\n     * @type {?}\n     * @private\n     */\n    MatGridList.prototype._gutter;\n    /**\n     * Sets position and size styles for a tile\n     * @type {?}\n     * @private\n     */\n    MatGridList.prototype._tileStyler;\n    /**\n     * Query list of tiles that are being rendered.\n     * @type {?}\n     */\n    MatGridList.prototype._tiles;\n    /**\n     * @type {?}\n     * @private\n     */\n    MatGridList.prototype._element;\n    /**\n     * @type {?}\n     * @private\n     */\n    MatGridList.prototype._dir;\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/material/grid-list/grid-list-module.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nclass MatGridListModule {\n}\nMatGridListModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: MatGridListModule });\nMatGridListModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function MatGridListModule_Factory(t) { return new (t || MatGridListModule)(); }, imports: [[MatLineModule, MatCommonModule],\n        MatLineModule,\n        MatCommonModule] });\n(function () { (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(MatGridListModule, { declarations: function () { return [MatGridList,\n        MatGridTile,\n        MatGridTileText,\n        MatGridTileHeaderCssMatStyler,\n        MatGridTileFooterCssMatStyler,\n        MatGridAvatarCssMatStyler]; }, imports: function () { return [MatLineModule, MatCommonModule]; }, exports: function () { return [MatGridList,\n        MatGridTile,\n        MatGridTileText,\n        MatLineModule,\n        MatCommonModule,\n        MatGridTileHeaderCssMatStyler,\n        MatGridTileFooterCssMatStyler,\n        MatGridAvatarCssMatStyler]; } }); })();\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MatGridListModule, [{\n        type: NgModule,\n        args: [{\n                imports: [MatLineModule, MatCommonModule],\n                exports: [\n                    MatGridList,\n                    MatGridTile,\n                    MatGridTileText,\n                    MatLineModule,\n                    MatCommonModule,\n                    MatGridTileHeaderCssMatStyler,\n                    MatGridTileFooterCssMatStyler,\n                    MatGridAvatarCssMatStyler\n                ],\n                declarations: [\n                    MatGridList,\n                    MatGridTile,\n                    MatGridTileText,\n                    MatGridTileHeaderCssMatStyler,\n                    MatGridTileFooterCssMatStyler,\n                    MatGridAvatarCssMatStyler\n                ]\n            }]\n    }], null, null); })();\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/material/grid-list/public-api.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { MatGridAvatarCssMatStyler, MatGridList, MatGridListModule, MatGridTile, MatGridTileFooterCssMatStyler, MatGridTileHeaderCssMatStyler, MatGridTileText, TileCoordinator as ɵTileCoordinator, MAT_GRID_LIST as ɵangular_material_src_material_grid_list_grid_list_a };\n\n//# sourceMappingURL=grid-list.js.map","import { Component, ViewChild, Input, OnInit } from \"@angular/core\";\nimport { MainService } from 'src/app/services/main.service';\nimport { Constants } from 'src/app/services/constants';\nimport { HostListener } from \"@angular/core\";\nimport { ActivatedRoute, Router, NavigationEnd } from '@angular/router';\nimport {\n  ChartComponent,\n  ApexAxisChartSeries,\n  ApexChart,\n  ApexXAxis,\n  ApexTitleSubtitle\n} from \"ng-apexcharts\";\nexport type ChartOptions = {\n  series: ApexAxisChartSeries;\n  chart: ApexChart;\n  xaxis: ApexXAxis;\n  title: ApexTitleSubtitle;\n};\n\n@Component({\n  selector: 'ulsiintusuv-charts',\n  templateUrl: './ulsiintusuvcharts.component.html',\n  styleUrls: ['./ulsiintusuvcharts.component.scss']\n})\nexport class UlsiintusuvchartsComponent implements OnInit {\n\n  isDataLoaded = false;\n  @Input()\n  values: any;\n\n  @Input()\n  names: any;\n\n  @Input()\n  title: any;\n\n  @Input()\n  sub: any;\n\n  @Input()\n  sum: any;\n\n  @Input()\n  process: any;\n\n    \n  @Input()\n  colors = [];\n\n  @Input()\n  legend: any;\n\n  @Input()\n  isZarlaga: any;\n\n  @Input()\n  isOrlogo: any;\n  \n  @Input()\n  percent: any;\n  @Input()\n  prefValue: any;\n\n  @Input()\n  befPercent: any;\n  \n  width = 0;\n  labelWidth = 0;\n  fontSize = \"13px\";\n  screenHeight: number;\n  screenWidth: number;\n  public innerWidth: any;\n  \n  params = {year: Constants.year, category: this.mainService.type}\n  \n  @ViewChild(\"chart\") chart: ChartComponent;\n  public chartOptions: any;\n\n  @HostListener('window:resize', ['$event'])\n  onResize(event?) {\n    this.screenHeight = window.innerHeight;\n    this.screenWidth = window.innerWidth;\n    console.log(this.legend);\n    if(!this.legend){\n      this.width = 500;\n    }else{\n      this.width = 600;\n    }\n    // if(this.screenWidth<=1680 && this.screenWidth>1440){\n    //   this.width = 450;\n    // }else if( this.screenWidth<=1440 && this.screenWidth>1200){\n    //   this.width = 350;\n    // }else if( this.screenWidth<=1200 && this.screenWidth>1010){\n    //   this.width = 300;\n    // }else{\n    //   this.width = 500;\n    // }\n  }\n  constructor(private mainService: MainService, private router: Router) {\n    this.onResize();\n    router.events.subscribe((val) => {\n      if(val instanceof NavigationEnd) {\n        if(val.url.split('?').length > 1){\n          this.setQueryParam(val.url.split('?')[1]);          \n        }\n      }\n    });\n  }\n   setQueryParam(param){\n    var query = {};\n    var params = param.split(\"&\");\n    params.forEach(function(entry) {\n        var p = entry.split('=');\n        this.params[p[0]] = p[1];\n    },this);    \n  }\n\n  ngOnInit() {\n    this.innerWidth = window.innerWidth;\n    this.getWidth();\n    const handleSelect = (event, chartContext, config) => {    \n      this.mainService.orlogoSub(this.sub, config.dataPointIndex);\n    }\n    this.chartOptions = {\n      fontFamily: \"Montserrat, sans-serif\",\n      series: this.values,\n      chart: {\n        width: \"100%\",\n        type: \"donut\",\n        events: {         \n          legendClick: function(chartContext, seriesIndex, config) {\n          },\n          dataPointSelection: handleSelect\n        },\n      },\n      dataLabels: {\n        enabled: false,\n        style: {\n          fontSize: '16px'\n      },\n        dropShadow: {\n          enabled: false\n        }\n      },\n      labels: this.names,\n      colors: this.colors,\n      stroke: {\n        width: 0,\n      },\n      legend: {\n        show: this.legend,\n        position: \"bottom\",\n        width: this.labelWidth,\n        horizontalAlign: 'left', \n        fontSize: this.fontSize,\n        offsetX: 100,\n      },\n      tooltip: {\n        enabled: false,  \n        y: {\n          formatter: function(value, series) {\n            return value.toFixed(2).replace(/\\d(?=(\\d{3})+\\.)/g, '$&,');\n          },\n          title: {\n              formatter: (seriesName) => seriesName,\n          },\n      },\n      },  \n      plotOptions: {\n        pie: {\n          donut: {\n            size: '75%',\n            \n          }\n        }\n      },      \n      responsive: [\n        {\n          breakpoint: 480,\n          options: {\n            chart: {\n              width: 300\n            },\n            legend: {\n              position: \"bottom\"\n            }\n          }\n        }\n      ]\n    };\n    this.isDataLoaded = true;   \n    \n  }\n  getWidth(){\n    this.screenHeight = window.innerHeight;\n    this.screenWidth = window.innerWidth;\n    if(this.screenWidth<=1680 && this.screenWidth>1440){\n      if(!this.legend){\n        this.width = 450;\n      }else{\n        this.labelWidth = 350;\n        this.fontSize = \"10px\";\n        this.width = 550;\n      }\n    }else if( this.screenWidth<=1440 && this.screenWidth>1200){\n      if(!this.legend){\n        this.width = 350;\n      }else{\n        this.width = 450;\n      }\n    }else if( this.screenWidth<=1200 && this.screenWidth>1010){\n      if(!this.legend){\n        this.width = 300;\n      }else{\n        this.width = 400;\n      }\n    }else{\n      if(!this.legend){\n        this.width = 500;\n      }else{\n        this.width = 600;\n      }\n    }\n  }\n  \n  getType(){\n    return this.mainService.type == \"APPROVED\"?\"гүйцэтгэл\":\"өмнөх оноос\";\n  }\n\n  checkType(){\n    return this.mainService.type == \"APPROVED\"; \n  }\n  \n\n}\n","<div class=\"pie_chart center\" style=\"text-align:center; width: {{width}}px;\"  *ngIf=\"isDataLoaded\">\n    <apx-chart\n      [series]=\"chartOptions.series\"\n      [labels]=\"chartOptions.labels\"\n      [chart]=\"chartOptions.chart\"\n      [xaxis]=\"chartOptions.xaxis\"\n      [title]=\"chartOptions.title\"\n      [legend]=\"chartOptions.legend\"\n      [plotOptions]=\"chartOptions.plotOptions\"\n      [colors]=\"chartOptions.colors\"\n      [stroke]=\"chartOptions.stroke\"\n      [dataLabels]=\"chartOptions.dataLabels\"\n      [tooltip]=\"chartOptions.tooltip\"\n    ></apx-chart>\n    <div class=\"chart_text\" >\n      <div *ngIf=\"isOrlogo\">\n        <img class=\"m_l\" src=\"../../../../assets/image/budget/main/orlogo.png\" />\n      </div>\n      \n      <div *ngIf=\"isZarlaga\">\n        <img class=\"m_l\" src=\"../../../../assets/image/budget/main/zarlaga.png\" />\n      </div>\n      \n      <span >{{title}}</span>\n      <h4 style=\"color:{{colors[0]}}\">{{sum | number}}</h4>\n      <div class=\"terbum\">тэрбум төгрөг</div>\n      <!-- <div class=\"process\">гүйцэтгэл <b>{{process}}% 123</b> тэрбум</div>  -->\n<!-- {{params['category']=='APPROVED'}} -->\n      <div *ngIf=\"prefValue != null\" class=\"process\" style=\"width: 100%;\">\n        <ng-container *ngIf=\"params['category']=='APPROVED'\">\n          Гүйцэтгэл <b style=\"display: inline-block; color:{{colors[0]}}\">{{percent}}%</b><br/>\n            <b style=\"color:{{colors[0]}}\">{{prefValue | number}}</b> тэрбум\n        </ng-container>\n        <div *ngIf=\"params['category']!='APPROVED'\">\n          Өмнөх оноос <b style=\"display: inline-block; color:{{colors[0]}}\">{{befPercent}}%\n            <i-feather name=\"arrow-down\" class=\"down-icon\" style=\"color: #333;\" *ngIf=\"params['category']!='APPROVED' && befPercent < 0\"></i-feather>\n            <i-feather name=\"arrow-up\" class=\"down-icon\" style=\"color: #333;\" *ngIf=\"params['category']!='APPROVED' && befPercent >= 0\"></i-feather>    \n            </b><br/>\n        </div>\n    </div>\n    </div>\n  </div>","import { NgModule, CUSTOM_ELEMENTS_SCHEMA } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { UlsiintusuvchartsComponent } from './ulsiintusuvcharts.component';\nimport { IconsModule } from 'src/app/icons/icons.module';\n// import { NgApexchartsModule } from 'ng-apexcharts';\n\n\n\n@NgModule({\n  declarations: [UlsiintusuvchartsComponent],\n  imports: [\n    CommonModule,\n    IconsModule,\n    // NgApexchartsModule\n  ],\n  exports: [UlsiintusuvchartsComponent],\n  schemas: [CUSTOM_ELEMENTS_SCHEMA]\n})\nexport class UlsiintusuvchartsModule { }\n"]}