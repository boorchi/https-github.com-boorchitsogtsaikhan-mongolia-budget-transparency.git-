{"version":3,"sources":["./src/app/services/backend.service.ts"],"names":[],"mappings":"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","file":"default~pages-budget-dashboard-budget-dashboard-module~pages-legacy-legacy-module-es2015.js","sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { Constants } from './constants';\n\nexport interface BudgetData {\n  id?: number;\n  ministry: string;\n  department: string;\n  year: number;\n  amount: number;\n  category: string;\n  type: string;\n  subcategory?: string;\n  description?: string;\n  metadata?: any;\n  createdAt?: Date;\n  updatedAt?: Date;\n}\n\nexport interface DashboardStats {\n  totalBudget: number;\n  totalRecords: number;\n  totalContent: number;\n  totalReports: number;\n  lastUpdate?: string;\n}\n\nexport interface IndicatorData {\n  id?: number;\n  name: string;\n  value: number;\n  previousValue?: number;\n  unit: string;\n  category: string;\n  description?: string;\n  year: number;\n  changePercentage?: number;\n  status?: 'increase' | 'decrease' | 'stable';\n  metadata?: any;\n  createdAt?: Date;\n  updatedAt?: Date;\n}\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class BackendService {\n  private baseUrl = Constants.NEW_BACKEND_URL;\n  private publicUrl = Constants.NEW_BACKEND_PUBLIC;\n  private httpOptions = {\n    headers: new HttpHeaders({\n      'Content-Type': 'application/json'\n    })\n  };\n\n  constructor(private http: HttpClient) {}\n\n  // Health check method\n  async checkBackendConnection(): Promise<boolean> {\n    try {\n      // Try the public API endpoint to verify connection\n      const response = await this.http.get(`${this.publicUrl}/budget/overview`, { \n        ...this.httpOptions,\n        observe: 'response'\n      }).toPromise();\n      console.log('Backend connection successful', response);\n      return true;\n    } catch (error) {\n      console.log('Backend connection error:', error);\n      \n      // If it's a CORS error, the server is likely running but CORS isn't configured\n      if (error.status === 0 && error.error instanceof ProgressEvent) {\n        console.log('Backend is running but CORS is not configured properly');\n        // Return true since backend is running, just CORS issue\n        return true;\n      }\n      \n      // For other errors, backend is likely not running\n      return false;\n    }\n  }\n\n  // Public API endpoints (no authentication required)\n  \n  /**\n   * Get public budget data from the new backend\n   */\n  getPublicBudgetData(): Promise<BudgetData[]> {\n    return this.http.get<any[]>(`${this.publicUrl}/budget/expenditure`, this.httpOptions)\n      .pipe(map(response => response || []))\n      .toPromise();\n  }\n\n  /**\n   * Get revenue data from the backend\n   */\n  getRevenueData(): Promise<BudgetData[]> {\n    return this.http.get<any[]>(`${this.publicUrl}/budget/revenue`, this.httpOptions)\n      .pipe(map(response => response || []))\n      .toPromise();\n  }\n\n  /**\n   * Get revenue data filtered by year\n   */\n  getRevenueDataByYear(year: number): Promise<BudgetData[]> {\n    return this.http.get<any[]>(`${this.publicUrl}/budget/revenue?year=${year}`, this.httpOptions)\n      .pipe(map(response => {\n        if (!response) return [];\n        return response.map(item => ({\n          id: item.id,\n          ministry: item.metadata?.ministry || item.ministry || 'Unknown Ministry',\n          department: item.metadata?.department || item.department || 'Unknown Department',\n          year: item.year,\n          amount: item.amount,\n          category: item.category,\n          type: item.type,\n          subcategory: item.subcategory,\n          description: item.description,\n          metadata: item.metadata,\n          createdAt: item.createdAt,\n          updatedAt: item.updatedAt\n        } as BudgetData));\n      }))\n      .toPromise();\n  }\n\n  /**\n   * Get expenditure data from the backend\n   */\n  getExpenditureData(): Promise<BudgetData[]> {\n    return this.http.get<any[]>(`${this.publicUrl}/budget/expenditure`, this.httpOptions)\n      .pipe(map(response => response || []))\n      .toPromise();\n  }\n\n  /**\n   * Get expenditure data filtered by year\n   */\n  getExpenditureDataByYear(year: number): Promise<BudgetData[]> {\n    return this.http.get<any[]>(`${this.publicUrl}/budget/expenditure?year=${year}`, this.httpOptions)\n      .pipe(map(response => {\n        if (!response) return [];\n        return response.map(item => ({\n          id: item.id,\n          ministry: item.metadata?.ministry || item.ministry || 'Unknown Ministry',\n          department: item.metadata?.department || item.department || 'Unknown Department',\n          year: item.year,\n          amount: item.amount,\n          category: item.category,\n          type: item.type,\n          subcategory: item.subcategory,\n          description: item.description,\n          metadata: item.metadata,\n          createdAt: item.createdAt,\n          updatedAt: item.updatedAt\n        } as BudgetData));\n      }))\n      .toPromise();\n  }\n\n  /**\n   * Get budget data filtered by year\n   */\n  getBudgetDataByYear(year: number): Promise<BudgetData[]> {\n    return this.http.get<any[]>(`${this.publicUrl}/budget/expenditure?year=${year}`, this.httpOptions)\n      .pipe(map(response => response || []))\n      .toPromise();\n  }\n\n  /**\n   * Get budget data filtered by category (education, health, etc.)\n   */\n  getBudgetDataByCategory(category: string): Promise<BudgetData[]> {\n    return this.http.get<BudgetData[]>(`${this.baseUrl}/public/budget-data?category=${category}`, this.httpOptions)\n      .pipe(map(response => response || []))\n      .toPromise();\n  }\n\n  /**\n   * Get budget data filtered by ministry\n   */\n  getBudgetDataByMinistry(ministry: string): Promise<BudgetData[]> {\n    return this.http.get<BudgetData[]>(`${this.baseUrl}/public/budget-data?ministry=${encodeURIComponent(ministry)}`, this.httpOptions)\n      .pipe(map(response => response || []))\n      .toPromise();\n  }\n\n  /**\n   * Get dashboard statistics\n   */\n  getDashboardStats(): Promise<DashboardStats> {\n    return this.http.get<any>(`${this.publicUrl}/budget/overview`, this.httpOptions)\n      .pipe(map(response => ({\n        totalBudget: (response?.totalRevenue || 0) + (response?.totalExpenditure || 0),\n        totalRecords: 1,\n        totalContent: 0,\n        totalReports: 0,\n        lastUpdate: response?.lastUpdated\n      })))\n      .toPromise();\n  }\n\n  /**\n   * Get content from backend (news, announcements, etc.)\n   */\n  getPublicContent(type?: string): Promise<any[]> {\n    const url = type ? \n      `${this.baseUrl}/public/content?type=${type}` : \n      `${this.baseUrl}/public/content`;\n    \n    return this.http.get<any[]>(url, this.httpOptions)\n      .pipe(map(response => response || []))\n      .toPromise();\n  }\n\n  /**\n   * Search budget data\n   */\n  searchBudgetData(query: string): Promise<BudgetData[]> {\n    return this.http.get<BudgetData[]>(`${this.baseUrl}/public/budget-data?search=${encodeURIComponent(query)}`, this.httpOptions)\n      .pipe(map(response => response || []))\n      .toPromise();\n  }\n\n  /**\n   * Get aggregated budget data (totals by category, ministry, etc.)\n   */\n  getBudgetAggregates(groupBy: 'category' | 'ministry' | 'year' = 'category'): Promise<any[]> {\n    return this.http.get<any[]>(`${this.baseUrl}/public/budget-data/aggregates?groupBy=${groupBy}`, this.httpOptions)\n      .pipe(map(response => response || []))\n      .toPromise();\n  }\n\n  /**\n   * Get budget trends over time\n   */\n  getBudgetTrends(ministry?: string, category?: string): Promise<any[]> {\n    let url = `${this.baseUrl}/public/budget-data/trends`;\n    const params = [];\n    \n    if (ministry) params.push(`ministry=${encodeURIComponent(ministry)}`);\n    if (category) params.push(`category=${category}`);\n    \n    if (params.length > 0) {\n      url += '?' + params.join('&');\n    }\n\n    return this.http.get<any[]>(url, this.httpOptions)\n      .pipe(map(response => response || []))\n      .toPromise();\n  }\n\n  /**\n   * Check backend health\n   */\n  checkHealth(): Promise<any> {\n    return this.http.get<any>(`${this.baseUrl}/health`, this.httpOptions)\n      .toPromise();\n  }\n\n  // Government data proxy endpoints\n\n  /**\n   * Get data from government APIs via backend proxy\n   */\n  getGovernmentData(endpoint: string, params?: any): Promise<any> {\n    const url = `${this.baseUrl}/government/proxy`;\n    const body = {\n      endpoint: endpoint,\n      params: params || {}\n    };\n\n    return this.http.post<any>(url, body, this.httpOptions)\n      .pipe(map(response => response || {}))\n      .toPromise();\n  }\n\n  /**\n   * Sync data from government APIs\n   */\n  syncGovernmentData(): Promise<any> {\n    return this.http.post<any>(`${this.baseUrl}/government/sync`, {}, this.httpOptions)\n      .toPromise();\n  }\n\n  // Helper methods\n\n  /**\n   * Format currency numbers for display\n   */\n  formatCurrency(amount: number): string {\n    if (!amount) return '0';\n    \n    if (amount >= 1000000000) {\n      return (amount / 1000000000).toFixed(1) + ' тэрбум';\n    } else if (amount >= 1000000) {\n      return (amount / 1000000).toFixed(1) + ' сая';\n    } else if (amount >= 1000) {\n      return (amount / 1000).toFixed(1) + ' мянга';\n    }\n    \n    return amount.toLocaleString('mn-MN');\n  }\n\n  /**\n   * Get category display name in Mongolian\n   */\n  getCategoryDisplayName(category: string): string {\n    const categoryNames = {\n      'education': 'Боловсрол',\n      'health': 'Эрүүл мэнд',\n      'infrastructure': 'Дэд бүтэц',\n      'defense': 'Батлан хамгаалах',\n      'social': 'Нийгмийн хамгаалал',\n      'environment': 'Байгаль орчин',\n      'agriculture': 'Хөдөө аж ахуй',\n      'tourism': 'Аялал жуулчлал',\n      'culture': 'Соёл урлаг',\n      'transport': 'Тээвэр харилцаа',\n      'energy': 'Эрчим хүч',\n      'mining': 'Уул уурхай',\n      'technology': 'Технологи',\n      'other': 'Бусад'\n    };\n    \n    return categoryNames[category] || category;\n  }\n\n  /**\n   * Get ministry short name\n   */\n  getMinistryShortName(ministry: string): string {\n    const ministryShortNames = {\n      'Ministry of Education and Science': 'БШУ',\n      'Ministry of Health': 'ЭМЯ',\n      'Ministry of Infrastructure': 'ДБХЯ',\n      'Ministry of Defense': 'БХЯ',\n      'Ministry of Social Welfare': 'НХНЯ',\n      'Ministry of Environment': 'БОЯ'\n    };\n    \n    return ministryShortNames[ministry] || ministry.split(' ').map(word => word[0]).join('');\n  }\n\n  // Indicators API methods\n\n  /**\n   * Get all indicators data\n   */\n  getIndicators(): Promise<IndicatorData[]> {\n    return this.http.get<IndicatorData[]>(`${this.baseUrl}/indicators`, this.httpOptions)\n      .toPromise()\n      .catch(() => {\n        // Return empty array instead of mock data - only show real backend data\n        return [];\n      });\n  }\n\n  /**\n   * Get indicators by year\n   */\n  getIndicatorsByYear(year: number): Promise<IndicatorData[]> {\n    return this.http.get<IndicatorData[]>(`${this.baseUrl}/indicators/year/${year}`, this.httpOptions)\n      .toPromise()\n      .catch(() => {\n        // Return empty array instead of mock data - only show real backend data\n        return [];\n      });\n  }\n\n  /**\n   * Get indicators by category\n   */\n  getIndicatorsByCategory(category: string): Promise<IndicatorData[]> {\n    return this.http.get<IndicatorData[]>(`${this.baseUrl}/indicators/category/${category}`, this.httpOptions)\n      .toPromise()\n      .catch(() => {\n        // Return empty array instead of mock data - only show real backend data\n        return [];\n      });\n  }\n}\n"],"sourceRoot":"webpack:///"}