{"version":3,"sources":["webpack:///src/app/services/backend.service.ts"],"names":["BackendService","http","baseUrl","NEW_BACKEND_URL","publicUrl","NEW_BACKEND_PUBLIC","httpOptions","headers","checkBackendConnection","get","observe","toPromise","response","console","log","status","error","ProgressEvent","getPublicBudgetData","pipe","getRevenueData","getRevenueDataByYear","year","map","item","id","ministry","metadata","department","amount","category","type","subcategory","description","createdAt","updatedAt","getExpenditureData","getExpenditureDataByYear","getBudgetDataByYear","getBudgetDataByCategory","getBudgetDataByMinistry","encodeURIComponent","getDashboardStats","totalBudget","totalRevenue","totalExpenditure","totalRecords","totalContent","totalReports","lastUpdate","lastUpdated","getPublicContent","url","searchBudgetData","query","getBudgetAggregates","groupBy","getBudgetTrends","params","push","length","join","checkHealth","getGovernmentData","endpoint","body","post","syncGovernmentData","formatCurrency","toFixed","toLocaleString","getCategoryDisplayName","categoryNames","getMinistryShortName","ministryShortNames","split","word","getIndicators","getIndicatorsByYear","getIndicatorsByCategory","providedIn"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;QAgDaA,c;AASX,8BAAoBC,IAApB,EAAsC;AAAA;;AAAlB,aAAAA,IAAA,GAAAA,IAAA;AARZ,aAAAC,OAAA,GAAU,qDAAUC,eAApB;AACA,aAAAC,SAAA,GAAY,qDAAUC,kBAAtB;AACA,aAAAC,WAAA,GAAc;AACpBC,iBAAO,EAAE,IAAI,gEAAJ,CAAgB;AACvB,4BAAgB;AADO,WAAhB;AADW,SAAd;AAMgC,O,CAExC;;;;;eACM,SAAAC,sBAAsB;;;;;;;;;AAGP,yBAAM,KAAKP,IAAL,CAAUQ,GAAV,WAAiB,KAAKL,SAAtB,uBAAmD,MAAF,OAAE,CAAF,kBACnE,KAAKE,WAD8D,CAAE,EACrD;AACnBI,2BAAO,EAAE;AADU,mBADqD,CAAnD,EAGpBC,SAHoB,EAAN;;;AAAXC,0B;AAINC,yBAAO,CAACC,GAAR,CAAY,+BAAZ,EAA6CF,QAA7C;uCACO,I;;;;;AAEPC,yBAAO,CAACC,GAAR,CAAY,2BAAZ,M,CAEA;;wBACI,GAAMC,MAAN,KAAiB,CAAjB,IAAsB,GAAMC,KAAN,YAAuBC,a;;;;;AAC/CJ,yBAAO,CAACC,GAAR,CAAY,wDAAZ,E,CACA;;uCACO,I;;;uCAIF,K;;;;AAEV,S,CAED;;AAEA;;;;;;eAGA,SAAAI,mBAAmB;AACjB,iBAAO,KAAKjB,IAAL,CAAUQ,GAAV,WAAwB,KAAKL,SAA7B,0BAA6D,KAAKE,WAAlE,EACJa,IADI,CACC,2DAAI,UAAAP,QAAQ;AAAA,mBAAIA,QAAQ,IAAI,EAAhB;AAAA,WAAZ,CADD,EAEJD,SAFI,EAAP;AAGD;AAED;;;;;;eAGA,SAAAS,cAAc;AACZ,iBAAO,KAAKnB,IAAL,CAAUQ,GAAV,WAAwB,KAAKL,SAA7B,sBAAyD,KAAKE,WAA9D,EACJa,IADI,CACC,2DAAI,UAAAP,QAAQ;AAAA,mBAAIA,QAAQ,IAAI,EAAhB;AAAA,WAAZ,CADD,EAEJD,SAFI,EAAP;AAGD;AAED;;;;;;eAGA,SAAAU,oBAAoB,CAACC,IAAD,EAAa;AAC/B,iBAAO,KAAKrB,IAAL,CAAUQ,GAAV,WAAwB,KAAKL,SAA7B,kCAA8DkB,IAA9D,GAAsE,KAAKhB,WAA3E,EACJa,IADI,CACC,2DAAI,UAAAP,QAAQ,EAAI;AACpB,gBAAI,CAACA,QAAL,EAAe,OAAO,EAAP;AACf,mBAAOA,QAAQ,CAACW,GAAT,CAAa,UAAAC,IAAI,EAAI;;;AAAA,qBAAC;AAC3BC,kBAAE,EAAED,IAAI,CAACC,EADkB;AAE3BC,wBAAQ,EAAE,OAAAF,IAAI,CAACG,QAAL,MAAa,IAAb,IAAa,aAAb,GAAa,MAAb,GAAa,GAAED,QAAf,KAA2BF,IAAI,CAACE,QAAhC,IAA4C,kBAF3B;AAG3BE,0BAAU,EAAE,OAAAJ,IAAI,CAACG,QAAL,MAAa,IAAb,IAAa,aAAb,GAAa,MAAb,GAAa,GAAEC,UAAf,KAA6BJ,IAAI,CAACI,UAAlC,IAAgD,oBAHjC;AAI3BN,oBAAI,EAAEE,IAAI,CAACF,IAJgB;AAK3BO,sBAAM,EAAEL,IAAI,CAACK,MALc;AAM3BC,wBAAQ,EAAEN,IAAI,CAACM,QANY;AAO3BC,oBAAI,EAAEP,IAAI,CAACO,IAPgB;AAQ3BC,2BAAW,EAAER,IAAI,CAACQ,WARS;AAS3BC,2BAAW,EAAET,IAAI,CAACS,WATS;AAU3BN,wBAAQ,EAAEH,IAAI,CAACG,QAVY;AAW3BO,yBAAS,EAAEV,IAAI,CAACU,SAXW;AAY3BC,yBAAS,EAAEX,IAAI,CAACW;AAZW,eAAD;AAaZ,aAbT,CAAP;AAcD,WAhBK,CADD,EAkBJxB,SAlBI,EAAP;AAmBD;AAED;;;;;;eAGA,SAAAyB,kBAAkB;AAChB,iBAAO,KAAKnC,IAAL,CAAUQ,GAAV,WAAwB,KAAKL,SAA7B,0BAA6D,KAAKE,WAAlE,EACJa,IADI,CACC,2DAAI,UAAAP,QAAQ;AAAA,mBAAIA,QAAQ,IAAI,EAAhB;AAAA,WAAZ,CADD,EAEJD,SAFI,EAAP;AAGD;AAED;;;;;;eAGA,SAAA0B,wBAAwB,CAACf,IAAD,EAAa;AACnC,iBAAO,KAAKrB,IAAL,CAAUQ,GAAV,WAAwB,KAAKL,SAA7B,sCAAkEkB,IAAlE,GAA0E,KAAKhB,WAA/E,EACJa,IADI,CACC,2DAAI,UAAAP,QAAQ,EAAI;AACpB,gBAAI,CAACA,QAAL,EAAe,OAAO,EAAP;AACf,mBAAOA,QAAQ,CAACW,GAAT,CAAa,UAAAC,IAAI,EAAI;;;AAAA,qBAAC;AAC3BC,kBAAE,EAAED,IAAI,CAACC,EADkB;AAE3BC,wBAAQ,EAAE,OAAAF,IAAI,CAACG,QAAL,MAAa,IAAb,IAAa,aAAb,GAAa,MAAb,GAAa,GAAED,QAAf,KAA2BF,IAAI,CAACE,QAAhC,IAA4C,kBAF3B;AAG3BE,0BAAU,EAAE,OAAAJ,IAAI,CAACG,QAAL,MAAa,IAAb,IAAa,aAAb,GAAa,MAAb,GAAa,GAAEC,UAAf,KAA6BJ,IAAI,CAACI,UAAlC,IAAgD,oBAHjC;AAI3BN,oBAAI,EAAEE,IAAI,CAACF,IAJgB;AAK3BO,sBAAM,EAAEL,IAAI,CAACK,MALc;AAM3BC,wBAAQ,EAAEN,IAAI,CAACM,QANY;AAO3BC,oBAAI,EAAEP,IAAI,CAACO,IAPgB;AAQ3BC,2BAAW,EAAER,IAAI,CAACQ,WARS;AAS3BC,2BAAW,EAAET,IAAI,CAACS,WATS;AAU3BN,wBAAQ,EAAEH,IAAI,CAACG,QAVY;AAW3BO,yBAAS,EAAEV,IAAI,CAACU,SAXW;AAY3BC,yBAAS,EAAEX,IAAI,CAACW;AAZW,eAAD;AAaZ,aAbT,CAAP;AAcD,WAhBK,CADD,EAkBJxB,SAlBI,EAAP;AAmBD;AAED;;;;;;eAGA,SAAA2B,mBAAmB,CAAChB,IAAD,EAAa;AAC9B,iBAAO,KAAKrB,IAAL,CAAUQ,GAAV,WAAwB,KAAKL,SAA7B,sCAAkEkB,IAAlE,GAA0E,KAAKhB,WAA/E,EACJa,IADI,CACC,2DAAI,UAAAP,QAAQ;AAAA,mBAAIA,QAAQ,IAAI,EAAhB;AAAA,WAAZ,CADD,EAEJD,SAFI,EAAP;AAGD;AAED;;;;;;eAGA,SAAA4B,uBAAuB,CAACT,QAAD,EAAiB;AACtC,iBAAO,KAAK7B,IAAL,CAAUQ,GAAV,WAA+B,KAAKP,OAApC,0CAA2E4B,QAA3E,GAAuF,KAAKxB,WAA5F,EACJa,IADI,CACC,2DAAI,UAAAP,QAAQ;AAAA,mBAAIA,QAAQ,IAAI,EAAhB;AAAA,WAAZ,CADD,EAEJD,SAFI,EAAP;AAGD;AAED;;;;;;eAGA,SAAA6B,uBAAuB,CAACd,QAAD,EAAiB;AACtC,iBAAO,KAAKzB,IAAL,CAAUQ,GAAV,WAA+B,KAAKP,OAApC,0CAA2EuC,kBAAkB,CAACf,QAAD,CAA7F,GAA2G,KAAKpB,WAAhH,EACJa,IADI,CACC,2DAAI,UAAAP,QAAQ;AAAA,mBAAIA,QAAQ,IAAI,EAAhB;AAAA,WAAZ,CADD,EAEJD,SAFI,EAAP;AAGD;AAED;;;;;;eAGA,SAAA+B,iBAAiB;AACf,iBAAO,KAAKzC,IAAL,CAAUQ,GAAV,WAAsB,KAAKL,SAA3B,uBAAwD,KAAKE,WAA7D,EACJa,IADI,CACC,2DAAI,UAAAP,QAAQ;AAAA,mBAAK;AACrB+B,yBAAW,EAAE,CAAC,CAAA/B,QAAQ,SAAR,IAAAA,QAAQ,WAAR,GAAQ,MAAR,GAAAA,QAAQ,CAAEgC,YAAV,KAA0B,CAA3B,KAAiC,CAAAhC,QAAQ,SAAR,IAAAA,QAAQ,WAAR,GAAQ,MAAR,GAAAA,QAAQ,CAAEiC,gBAAV,KAA8B,CAA/D,CADQ;AAErBC,0BAAY,EAAE,CAFO;AAGrBC,0BAAY,EAAE,CAHO;AAIrBC,0BAAY,EAAE,CAJO;AAKrBC,wBAAU,EAAErC,QAAQ,SAAR,IAAAA,QAAQ,WAAR,GAAQ,MAAR,GAAAA,QAAQ,CAAEsC;AALD,aAAL;AAAA,WAAZ,CADD,EAQJvC,SARI,EAAP;AASD;AAED;;;;;;eAGA,SAAAwC,gBAAgB,CAACpB,IAAD,EAAc;AAC5B,cAAMqB,GAAG,GAAGrB,IAAI,aACX,KAAK7B,OADM,kCACyB6B,IADzB,cAEX,KAAK7B,OAFM,oBAAhB;AAIA,iBAAO,KAAKD,IAAL,CAAUQ,GAAV,CAAqB2C,GAArB,EAA0B,KAAK9C,WAA/B,EACJa,IADI,CACC,2DAAI,UAAAP,QAAQ;AAAA,mBAAIA,QAAQ,IAAI,EAAhB;AAAA,WAAZ,CADD,EAEJD,SAFI,EAAP;AAGD;AAED;;;;;;eAGA,SAAA0C,gBAAgB,CAACC,KAAD,EAAc;AAC5B,iBAAO,KAAKrD,IAAL,CAAUQ,GAAV,WAA+B,KAAKP,OAApC,wCAAyEuC,kBAAkB,CAACa,KAAD,CAA3F,GAAsG,KAAKhD,WAA3G,EACJa,IADI,CACC,2DAAI,UAAAP,QAAQ;AAAA,mBAAIA,QAAQ,IAAI,EAAhB;AAAA,WAAZ,CADD,EAEJD,SAFI,EAAP;AAGD;AAED;;;;;;eAGA,SAAA4C,mBAAmB,GAAuD;AAAA,cAAtDC,OAAsD,uEAAV,UAAU;AACxE,iBAAO,KAAKvD,IAAL,CAAUQ,GAAV,WAAwB,KAAKP,OAA7B,oDAA8EsD,OAA9E,GAAyF,KAAKlD,WAA9F,EACJa,IADI,CACC,2DAAI,UAAAP,QAAQ;AAAA,mBAAIA,QAAQ,IAAI,EAAhB;AAAA,WAAZ,CADD,EAEJD,SAFI,EAAP;AAGD;AAED;;;;;;eAGA,SAAA8C,eAAe,CAAC/B,QAAD,EAAoBI,QAApB,EAAqC;AAClD,cAAIsB,GAAG,aAAM,KAAKlD,OAAX,+BAAP;AACA,cAAMwD,MAAM,GAAG,EAAf;AAEA,cAAIhC,QAAJ,EAAcgC,MAAM,CAACC,IAAP,oBAAwBlB,kBAAkB,CAACf,QAAD,CAA1C;AACd,cAAII,QAAJ,EAAc4B,MAAM,CAACC,IAAP,oBAAwB7B,QAAxB;;AAEd,cAAI4B,MAAM,CAACE,MAAP,GAAgB,CAApB,EAAuB;AACrBR,eAAG,IAAI,MAAMM,MAAM,CAACG,IAAP,CAAY,GAAZ,CAAb;AACD;;AAED,iBAAO,KAAK5D,IAAL,CAAUQ,GAAV,CAAqB2C,GAArB,EAA0B,KAAK9C,WAA/B,EACJa,IADI,CACC,2DAAI,UAAAP,QAAQ;AAAA,mBAAIA,QAAQ,IAAI,EAAhB;AAAA,WAAZ,CADD,EAEJD,SAFI,EAAP;AAGD;AAED;;;;;;eAGA,SAAAmD,WAAW;AACT,iBAAO,KAAK7D,IAAL,CAAUQ,GAAV,WAAsB,KAAKP,OAA3B,cAA6C,KAAKI,WAAlD,EACJK,SADI,EAAP;AAED,S,CAED;;AAEA;;;;;;eAGA,SAAAoD,iBAAiB,CAACC,QAAD,EAAmBN,MAAnB,EAA+B;AAC9C,cAAMN,GAAG,aAAM,KAAKlD,OAAX,sBAAT;AACA,cAAM+D,IAAI,GAAG;AACXD,oBAAQ,EAAEA,QADC;AAEXN,kBAAM,EAAEA,MAAM,IAAI;AAFP,WAAb;AAKA,iBAAO,KAAKzD,IAAL,CAAUiE,IAAV,CAAoBd,GAApB,EAAyBa,IAAzB,EAA+B,KAAK3D,WAApC,EACJa,IADI,CACC,2DAAI,UAAAP,QAAQ;AAAA,mBAAIA,QAAQ,IAAI,EAAhB;AAAA,WAAZ,CADD,EAEJD,SAFI,EAAP;AAGD;AAED;;;;;;eAGA,SAAAwD,kBAAkB;AAChB,iBAAO,KAAKlE,IAAL,CAAUiE,IAAV,WAAuB,KAAKhE,OAA5B,uBAAuD,EAAvD,EAA2D,KAAKI,WAAhE,EACJK,SADI,EAAP;AAED,S,CAED;;AAEA;;;;;;eAGA,SAAAyD,cAAc,CAACvC,MAAD,EAAe;AAC3B,cAAI,CAACA,MAAL,EAAa,OAAO,GAAP;;AAEb,cAAIA,MAAM,IAAI,UAAd,EAA0B;AACxB,mBAAO,CAACA,MAAM,GAAG,UAAV,EAAsBwC,OAAtB,CAA8B,CAA9B,IAAmC,SAA1C;AACD,WAFD,MAEO,IAAIxC,MAAM,IAAI,OAAd,EAAuB;AAC5B,mBAAO,CAACA,MAAM,GAAG,OAAV,EAAmBwC,OAAnB,CAA2B,CAA3B,IAAgC,MAAvC;AACD,WAFM,MAEA,IAAIxC,MAAM,IAAI,IAAd,EAAoB;AACzB,mBAAO,CAACA,MAAM,GAAG,IAAV,EAAgBwC,OAAhB,CAAwB,CAAxB,IAA6B,QAApC;AACD;;AAED,iBAAOxC,MAAM,CAACyC,cAAP,CAAsB,OAAtB,CAAP;AACD;AAED;;;;;;eAGA,SAAAC,sBAAsB,CAACzC,QAAD,EAAiB;AACrC,cAAM0C,aAAa,GAAG;AACpB,yBAAa,WADO;AAEpB,sBAAU,YAFU;AAGpB,8BAAkB,WAHE;AAIpB,uBAAW,kBAJS;AAKpB,sBAAU,oBALU;AAMpB,2BAAe,eANK;AAOpB,2BAAe,eAPK;AAQpB,uBAAW,gBARS;AASpB,uBAAW,YATS;AAUpB,yBAAa,iBAVO;AAWpB,sBAAU,WAXU;AAYpB,sBAAU,YAZU;AAapB,0BAAc,WAbM;AAcpB,qBAAS;AAdW,WAAtB;AAiBA,iBAAOA,aAAa,CAAC1C,QAAD,CAAb,IAA2BA,QAAlC;AACD;AAED;;;;;;eAGA,SAAA2C,oBAAoB,CAAC/C,QAAD,EAAiB;AACnC,cAAMgD,kBAAkB,GAAG;AACzB,iDAAqC,KADZ;AAEzB,kCAAsB,KAFG;AAGzB,0CAA8B,MAHL;AAIzB,mCAAuB,KAJE;AAKzB,0CAA8B,MALL;AAMzB,uCAA2B;AANF,WAA3B;AASA,iBAAOA,kBAAkB,CAAChD,QAAD,CAAlB,IAAgCA,QAAQ,CAACiD,KAAT,CAAe,GAAf,EAAoBpD,GAApB,CAAwB,UAAAqD,IAAI;AAAA,mBAAIA,IAAI,CAAC,CAAD,CAAR;AAAA,WAA5B,EAAyCf,IAAzC,CAA8C,EAA9C,CAAvC;AACD,S,CAED;;AAEA;;;;;;eAGA,SAAAgB,aAAa;AACX,iBAAO,KAAK5E,IAAL,CAAUQ,GAAV,WAAkC,KAAKP,OAAvC,kBAA6D,KAAKI,WAAlE,EACJK,SADI,YAEE,YAAM;AACX;AACA,mBAAO,EAAP;AACD,WALI,CAAP;AAMD;AAED;;;;;;eAGA,SAAAmE,mBAAmB,CAACxD,IAAD,EAAa;AAC9B,iBAAO,KAAKrB,IAAL,CAAUQ,GAAV,WAAkC,KAAKP,OAAvC,8BAAkEoB,IAAlE,GAA0E,KAAKhB,WAA/E,EACJK,SADI,YAEE,YAAM;AACX;AACA,mBAAO,EAAP;AACD,WALI,CAAP;AAMD;AAED;;;;;;eAGA,SAAAoE,uBAAuB,CAACjD,QAAD,EAAiB;AACtC,iBAAO,KAAK7B,IAAL,CAAUQ,GAAV,WAAkC,KAAKP,OAAvC,kCAAsE4B,QAAtE,GAAkF,KAAKxB,WAAvF,EACJK,SADI,YAEE,YAAM;AACX;AACA,mBAAO,EAAP;AACD,WALI,CAAP;AAMD;;;;;uBA/UUX,c,EAAc,uH;AAAA,K;;;aAAdA,c;AAAc,eAAdA,cAAc,K;AAAA,kBAFb;;;;;sEAEDA,c,EAAc;cAH1B,wDAG0B;eAHf;AACVgF,oBAAU,EAAE;AADF,S;AAGe,Q","file":"default~pages-budget-dashboard-budget-dashboard-module~pages-legacy-legacy-module-es5.js","sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { Constants } from './constants';\n\nexport interface BudgetData {\n  id?: number;\n  ministry: string;\n  department: string;\n  year: number;\n  amount: number;\n  category: string;\n  type: string;\n  subcategory?: string;\n  description?: string;\n  metadata?: any;\n  createdAt?: Date;\n  updatedAt?: Date;\n}\n\nexport interface DashboardStats {\n  totalBudget: number;\n  totalRecords: number;\n  totalContent: number;\n  totalReports: number;\n  lastUpdate?: string;\n}\n\nexport interface IndicatorData {\n  id?: number;\n  name: string;\n  value: number;\n  previousValue?: number;\n  unit: string;\n  category: string;\n  description?: string;\n  year: number;\n  changePercentage?: number;\n  status?: 'increase' | 'decrease' | 'stable';\n  metadata?: any;\n  createdAt?: Date;\n  updatedAt?: Date;\n}\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class BackendService {\n  private baseUrl = Constants.NEW_BACKEND_URL;\n  private publicUrl = Constants.NEW_BACKEND_PUBLIC;\n  private httpOptions = {\n    headers: new HttpHeaders({\n      'Content-Type': 'application/json'\n    })\n  };\n\n  constructor(private http: HttpClient) {}\n\n  // Health check method\n  async checkBackendConnection(): Promise<boolean> {\n    try {\n      // Try the public API endpoint to verify connection\n      const response = await this.http.get(`${this.publicUrl}/budget/overview`, { \n        ...this.httpOptions,\n        observe: 'response'\n      }).toPromise();\n      console.log('Backend connection successful', response);\n      return true;\n    } catch (error) {\n      console.log('Backend connection error:', error);\n      \n      // If it's a CORS error, the server is likely running but CORS isn't configured\n      if (error.status === 0 && error.error instanceof ProgressEvent) {\n        console.log('Backend is running but CORS is not configured properly');\n        // Return true since backend is running, just CORS issue\n        return true;\n      }\n      \n      // For other errors, backend is likely not running\n      return false;\n    }\n  }\n\n  // Public API endpoints (no authentication required)\n  \n  /**\n   * Get public budget data from the new backend\n   */\n  getPublicBudgetData(): Promise<BudgetData[]> {\n    return this.http.get<any[]>(`${this.publicUrl}/budget/expenditure`, this.httpOptions)\n      .pipe(map(response => response || []))\n      .toPromise();\n  }\n\n  /**\n   * Get revenue data from the backend\n   */\n  getRevenueData(): Promise<BudgetData[]> {\n    return this.http.get<any[]>(`${this.publicUrl}/budget/revenue`, this.httpOptions)\n      .pipe(map(response => response || []))\n      .toPromise();\n  }\n\n  /**\n   * Get revenue data filtered by year\n   */\n  getRevenueDataByYear(year: number): Promise<BudgetData[]> {\n    return this.http.get<any[]>(`${this.publicUrl}/budget/revenue?year=${year}`, this.httpOptions)\n      .pipe(map(response => {\n        if (!response) return [];\n        return response.map(item => ({\n          id: item.id,\n          ministry: item.metadata?.ministry || item.ministry || 'Unknown Ministry',\n          department: item.metadata?.department || item.department || 'Unknown Department',\n          year: item.year,\n          amount: item.amount,\n          category: item.category,\n          type: item.type,\n          subcategory: item.subcategory,\n          description: item.description,\n          metadata: item.metadata,\n          createdAt: item.createdAt,\n          updatedAt: item.updatedAt\n        } as BudgetData));\n      }))\n      .toPromise();\n  }\n\n  /**\n   * Get expenditure data from the backend\n   */\n  getExpenditureData(): Promise<BudgetData[]> {\n    return this.http.get<any[]>(`${this.publicUrl}/budget/expenditure`, this.httpOptions)\n      .pipe(map(response => response || []))\n      .toPromise();\n  }\n\n  /**\n   * Get expenditure data filtered by year\n   */\n  getExpenditureDataByYear(year: number): Promise<BudgetData[]> {\n    return this.http.get<any[]>(`${this.publicUrl}/budget/expenditure?year=${year}`, this.httpOptions)\n      .pipe(map(response => {\n        if (!response) return [];\n        return response.map(item => ({\n          id: item.id,\n          ministry: item.metadata?.ministry || item.ministry || 'Unknown Ministry',\n          department: item.metadata?.department || item.department || 'Unknown Department',\n          year: item.year,\n          amount: item.amount,\n          category: item.category,\n          type: item.type,\n          subcategory: item.subcategory,\n          description: item.description,\n          metadata: item.metadata,\n          createdAt: item.createdAt,\n          updatedAt: item.updatedAt\n        } as BudgetData));\n      }))\n      .toPromise();\n  }\n\n  /**\n   * Get budget data filtered by year\n   */\n  getBudgetDataByYear(year: number): Promise<BudgetData[]> {\n    return this.http.get<any[]>(`${this.publicUrl}/budget/expenditure?year=${year}`, this.httpOptions)\n      .pipe(map(response => response || []))\n      .toPromise();\n  }\n\n  /**\n   * Get budget data filtered by category (education, health, etc.)\n   */\n  getBudgetDataByCategory(category: string): Promise<BudgetData[]> {\n    return this.http.get<BudgetData[]>(`${this.baseUrl}/public/budget-data?category=${category}`, this.httpOptions)\n      .pipe(map(response => response || []))\n      .toPromise();\n  }\n\n  /**\n   * Get budget data filtered by ministry\n   */\n  getBudgetDataByMinistry(ministry: string): Promise<BudgetData[]> {\n    return this.http.get<BudgetData[]>(`${this.baseUrl}/public/budget-data?ministry=${encodeURIComponent(ministry)}`, this.httpOptions)\n      .pipe(map(response => response || []))\n      .toPromise();\n  }\n\n  /**\n   * Get dashboard statistics\n   */\n  getDashboardStats(): Promise<DashboardStats> {\n    return this.http.get<any>(`${this.publicUrl}/budget/overview`, this.httpOptions)\n      .pipe(map(response => ({\n        totalBudget: (response?.totalRevenue || 0) + (response?.totalExpenditure || 0),\n        totalRecords: 1,\n        totalContent: 0,\n        totalReports: 0,\n        lastUpdate: response?.lastUpdated\n      })))\n      .toPromise();\n  }\n\n  /**\n   * Get content from backend (news, announcements, etc.)\n   */\n  getPublicContent(type?: string): Promise<any[]> {\n    const url = type ? \n      `${this.baseUrl}/public/content?type=${type}` : \n      `${this.baseUrl}/public/content`;\n    \n    return this.http.get<any[]>(url, this.httpOptions)\n      .pipe(map(response => response || []))\n      .toPromise();\n  }\n\n  /**\n   * Search budget data\n   */\n  searchBudgetData(query: string): Promise<BudgetData[]> {\n    return this.http.get<BudgetData[]>(`${this.baseUrl}/public/budget-data?search=${encodeURIComponent(query)}`, this.httpOptions)\n      .pipe(map(response => response || []))\n      .toPromise();\n  }\n\n  /**\n   * Get aggregated budget data (totals by category, ministry, etc.)\n   */\n  getBudgetAggregates(groupBy: 'category' | 'ministry' | 'year' = 'category'): Promise<any[]> {\n    return this.http.get<any[]>(`${this.baseUrl}/public/budget-data/aggregates?groupBy=${groupBy}`, this.httpOptions)\n      .pipe(map(response => response || []))\n      .toPromise();\n  }\n\n  /**\n   * Get budget trends over time\n   */\n  getBudgetTrends(ministry?: string, category?: string): Promise<any[]> {\n    let url = `${this.baseUrl}/public/budget-data/trends`;\n    const params = [];\n    \n    if (ministry) params.push(`ministry=${encodeURIComponent(ministry)}`);\n    if (category) params.push(`category=${category}`);\n    \n    if (params.length > 0) {\n      url += '?' + params.join('&');\n    }\n\n    return this.http.get<any[]>(url, this.httpOptions)\n      .pipe(map(response => response || []))\n      .toPromise();\n  }\n\n  /**\n   * Check backend health\n   */\n  checkHealth(): Promise<any> {\n    return this.http.get<any>(`${this.baseUrl}/health`, this.httpOptions)\n      .toPromise();\n  }\n\n  // Government data proxy endpoints\n\n  /**\n   * Get data from government APIs via backend proxy\n   */\n  getGovernmentData(endpoint: string, params?: any): Promise<any> {\n    const url = `${this.baseUrl}/government/proxy`;\n    const body = {\n      endpoint: endpoint,\n      params: params || {}\n    };\n\n    return this.http.post<any>(url, body, this.httpOptions)\n      .pipe(map(response => response || {}))\n      .toPromise();\n  }\n\n  /**\n   * Sync data from government APIs\n   */\n  syncGovernmentData(): Promise<any> {\n    return this.http.post<any>(`${this.baseUrl}/government/sync`, {}, this.httpOptions)\n      .toPromise();\n  }\n\n  // Helper methods\n\n  /**\n   * Format currency numbers for display\n   */\n  formatCurrency(amount: number): string {\n    if (!amount) return '0';\n    \n    if (amount >= 1000000000) {\n      return (amount / 1000000000).toFixed(1) + ' тэрбум';\n    } else if (amount >= 1000000) {\n      return (amount / 1000000).toFixed(1) + ' сая';\n    } else if (amount >= 1000) {\n      return (amount / 1000).toFixed(1) + ' мянга';\n    }\n    \n    return amount.toLocaleString('mn-MN');\n  }\n\n  /**\n   * Get category display name in Mongolian\n   */\n  getCategoryDisplayName(category: string): string {\n    const categoryNames = {\n      'education': 'Боловсрол',\n      'health': 'Эрүүл мэнд',\n      'infrastructure': 'Дэд бүтэц',\n      'defense': 'Батлан хамгаалах',\n      'social': 'Нийгмийн хамгаалал',\n      'environment': 'Байгаль орчин',\n      'agriculture': 'Хөдөө аж ахуй',\n      'tourism': 'Аялал жуулчлал',\n      'culture': 'Соёл урлаг',\n      'transport': 'Тээвэр харилцаа',\n      'energy': 'Эрчим хүч',\n      'mining': 'Уул уурхай',\n      'technology': 'Технологи',\n      'other': 'Бусад'\n    };\n    \n    return categoryNames[category] || category;\n  }\n\n  /**\n   * Get ministry short name\n   */\n  getMinistryShortName(ministry: string): string {\n    const ministryShortNames = {\n      'Ministry of Education and Science': 'БШУ',\n      'Ministry of Health': 'ЭМЯ',\n      'Ministry of Infrastructure': 'ДБХЯ',\n      'Ministry of Defense': 'БХЯ',\n      'Ministry of Social Welfare': 'НХНЯ',\n      'Ministry of Environment': 'БОЯ'\n    };\n    \n    return ministryShortNames[ministry] || ministry.split(' ').map(word => word[0]).join('');\n  }\n\n  // Indicators API methods\n\n  /**\n   * Get all indicators data\n   */\n  getIndicators(): Promise<IndicatorData[]> {\n    return this.http.get<IndicatorData[]>(`${this.baseUrl}/indicators`, this.httpOptions)\n      .toPromise()\n      .catch(() => {\n        // Return empty array instead of mock data - only show real backend data\n        return [];\n      });\n  }\n\n  /**\n   * Get indicators by year\n   */\n  getIndicatorsByYear(year: number): Promise<IndicatorData[]> {\n    return this.http.get<IndicatorData[]>(`${this.baseUrl}/indicators/year/${year}`, this.httpOptions)\n      .toPromise()\n      .catch(() => {\n        // Return empty array instead of mock data - only show real backend data\n        return [];\n      });\n  }\n\n  /**\n   * Get indicators by category\n   */\n  getIndicatorsByCategory(category: string): Promise<IndicatorData[]> {\n    return this.http.get<IndicatorData[]>(`${this.baseUrl}/indicators/category/${category}`, this.httpOptions)\n      .toPromise()\n      .catch(() => {\n        // Return empty array instead of mock data - only show real backend data\n        return [];\n      });\n  }\n}\n"]}